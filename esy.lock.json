{
  "hash": "80abbc18fb1fe7b3e6164faed7d6314b",
  "root": "root@path:./package.json",
  "node": {
    "root@path:./package.json": {
      "record": {
        "name": "root",
        "version": "path:./package.json",
        "source": "path:./package.json",
        "files": [],
        "opam": null
      },
      "dependencies": [
        "@opam/alcotest@opam:0.8.3", "@opam/astring@opam:0.8.3",
        "@opam/bisect_ppx@opam:1.3.4", "@opam/bos@opam:0.2.0",
        "@opam/cmdliner@opam:1.0.2", "@opam/cppo@opam:1.6.5",
        "@opam/dune@opam:1.3.0", "@opam/fpath@opam:0.7.2",
        "@opam/js-build-tools@opam:113.33.04", "@opam/lambdasoup@opam:0.6.3",
        "@opam/markup@github:aantron/markup.ml:markup.opam#9f8e77",
        "@opam/merlin@opam:3.2.2", "@opam/oasis@opam:0.4.11",
        "@opam/ocamlfind@opam:1.8.0", "@opam/result@opam:1.3",
        "@opam/sexplib@github:bryphe/sexplib#548f94d",
        "@opam/tyxml@opam:4.2.0", "ocaml@4.2.3006"
      ]
    },
    "ocaml@4.2.3006": {
      "record": {
        "name": "ocaml",
        "version": "4.2.3006",
        "source":
          "archive:https://registry.npmjs.org/ocaml/-/ocaml-4.2.3006.tgz#sha1:ecd4e034a3b9337383a3ace583b62a7c8fcf2879",
        "files": [],
        "opam": null
      },
      "dependencies": [ "flexdll-prebuilt@0.37.2" ]
    },
    "flexdll-prebuilt@0.37.2": {
      "record": {
        "name": "flexdll-prebuilt",
        "version": "0.37.2",
        "source":
          "archive:https://registry.npmjs.org/flexdll-prebuilt/-/flexdll-prebuilt-0.37.2.tgz#sha1:9777bfa364ba0b58536043ccf5d8c8679d5214b8",
        "files": [],
        "opam": null
      },
      "dependencies": []
    },
    "@opam/yojson@opam:1.4.1": {
      "record": {
        "name": "@opam/yojson",
        "version": "opam:1.4.1",
        "source":
          "archive:https://github.com/mjambon/yojson/archive/v1.4.1.tar.gz#md5:3ea6e36422dd670e8ab880710d5f7398",
        "files": [],
        "opam": {
          "name": "yojson",
          "version": "1.4.1",
          "opam":
            "opam-version: \"2.0\"\nname: \"yojson\"\nversion: \"1.4.1\"\nsynopsis:\n  \"Yojson is an optimized parsing and printing library for the JSON format\"\ndescription: \"\"\"\nIt addresses a few shortcomings of json-wheel including 2x speedup,\npolymorphic variants and optional syntax for tuples and variants.\n\nydump is a pretty-printing command-line program provided with the\nyojson package.\n\nThe program atdgen can be used to derive OCaml-JSON serializers and\ndeserializers from type definitions.\"\"\"\nmaintainer: \"martin@mjambon.com\"\nauthors: \"Martin Jambon\"\nhomepage: \"http://mjambon.com/yojson.html\"\nbug-reports: \"https://github.com/mjambon/yojson/issues\"\ndepends: [\n  \"ocaml\" {>= \"4.02.3\"}\n  \"jbuilder\" {build}\n  \"cppo\" {build}\n  \"easy-format\"\n  \"biniou\" {>= \"1.2.0\"}\n]\nbuild: [\n  [\"jbuilder\" \"build\" \"-p\" name \"-j\" jobs]\n  [\"jbuilder\" \"runtest\" \"-p\" name] {with-test}\n]\ndev-repo: \"git+https://github.com/mjambon/yojson.git\"\nurl {\n  src: \"https://github.com/mjambon/yojson/archive/v1.4.1.tar.gz\"\n  checksum: \"md5=3ea6e36422dd670e8ab880710d5f7398\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/biniou@opam:1.2.0",
        "@opam/cppo@opam:1.6.5", "@opam/easy-format@opam:1.3.1",
        "@opam/jbuilder@opam:transition", "ocaml@4.2.3006"
      ]
    },
    "@opam/uutf@opam:1.0.1": {
      "record": {
        "name": "@opam/uutf",
        "version": "opam:1.0.1",
        "source":
          "archive:http://erratique.ch/software/uutf/releases/uutf-1.0.1.tbz#md5:b8535f974027357094c5cdb4bf03a21b",
        "files": [],
        "opam": {
          "name": "uutf",
          "version": "1.0.1",
          "opam":
            "opam-version: \"2.0\"\nname: \"uutf\"\nversion: \"1.0.1\"\nsynopsis: \"Non-blocking streaming Unicode codec for OCaml\"\ndescription: \"\"\"\nUutf is a non-blocking streaming codec to decode and encode the UTF-8,\nUTF-16, UTF-16LE and UTF-16BE encoding schemes. It can efficiently\nwork character by character without blocking on IO. Decoders perform\ncharacter position tracking and support newline normalization.\n\nFunctions are also provided to fold over the characters of UTF encoded\nOCaml string values and to directly encode characters in OCaml\nBuffer.t values.\n\nUutf has no dependency and is distributed under the ISC license.\"\"\"\nmaintainer: \"Daniel B端nzli <daniel.buenzl i@erratique.ch>\"\nauthors: \"Daniel B端nzli <daniel.buenzl i@erratique.ch>\"\nlicense: \"ISC\"\ntags: [\"unicode\" \"text\" \"utf-8\" \"utf-16\" \"codec\" \"org:erratique\"]\nhomepage: \"http://erratique.ch/software/uutf\"\ndoc: \"http://erratique.ch/software/uutf/doc/Uutf\"\nbug-reports: \"https://github.com/dbuenzli/uutf/issues\"\ndepends: [\n  \"ocaml\" {>= \"4.01.0\"}\n  \"ocamlfind\" {build}\n  \"ocamlbuild\" {build}\n  \"topkg\" {build}\n  \"uchar\"\n]\ndepopts: [\"cmdliner\"]\nconflicts: [\n  \"cmdliner\" {< \"0.9.6\"}\n]\nbuild: [\n  \"ocaml\"\n  \"pkg/pkg.ml\"\n  \"build\"\n  \"--pinned\"\n  \"%{pinned}%\"\n  \"--with-cmdliner\"\n  \"%{cmdliner:installed}%\"\n]\ndev-repo: \"git+http://erratique.ch/repos/uutf.git\"\nurl {\n  src: \"http://erratique.ch/software/uutf/releases/uutf-1.0.1.tbz\"\n  checksum: \"md5=b8535f974027357094c5cdb4bf03a21b\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/ocamlbuild@opam:0",
        "@opam/ocamlfind@opam:1.8.0", "@opam/topkg@opam:1.0.0",
        "@opam/uchar@opam:0.0.2", "ocaml@4.2.3006"
      ]
    },
    "@opam/uchar@opam:0.0.2": {
      "record": {
        "name": "@opam/uchar",
        "version": "opam:0.0.2",
        "source":
          "archive:https://github.com/ocaml/uchar/releases/download/v0.0.2/uchar-0.0.2.tbz#md5:c9ba2c738d264c420c642f7bb1cf4a36",
        "files": [],
        "opam": {
          "name": "uchar",
          "version": "0.0.2",
          "opam":
            "opam-version: \"2.0\"\nname: \"uchar\"\nversion: \"0.0.2\"\nsynopsis: \"Compatibility library for OCaml's Uchar module\"\ndescription: \"\"\"\nThe `uchar` package provides a compatibility library for the\n[`Uchar`][1] module introduced in OCaml 4.03.\n\nThe `uchar` package is distributed under the license of the OCaml\ncompiler. See [LICENSE](LICENSE) for details.\n\n[1]: http://caml.inria.fr/pub/docs/manual-ocaml/libref/Uchar.html\"\"\"\nmaintainer: \"Daniel B端nzli <daniel.buenzl i@erratique.ch>\"\nauthors: \"Daniel B端nzli <daniel.buenzl i@erratique.ch>\"\nlicense: \"typeof OCaml system\"\ntags: [\"text\" \"character\" \"unicode\" \"compatibility\" \"org:ocaml.org\"]\nhomepage: \"http://ocaml.org\"\ndoc: \"https://ocaml.github.io/uchar/\"\nbug-reports: \"https://github.com/ocaml/uchar/issues\"\ndepends: [\n  \"ocaml\" {>= \"3.12.0\"}\n  \"ocamlbuild\" {build}\n]\nbuild: [\n  [\"ocaml\" \"pkg/git.ml\"]\n  [\n    \"ocaml\"\n    \"pkg/build.ml\"\n    \"native=%{ocaml:native}%\"\n    \"native-dynlink=%{ocaml:native-dynlink}%\"\n  ]\n]\ndev-repo: \"git+https://github.com/ocaml/uchar.git\"\nurl {\n  src:\n    \"https://github.com/ocaml/uchar/releases/download/v0.0.2/uchar-0.0.2.tbz\"\n  checksum: \"md5=c9ba2c738d264c420c642f7bb1cf4a36\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/ocamlbuild@opam:0",
        "ocaml@4.2.3006"
      ]
    },
    "@opam/tyxml@opam:4.2.0": {
      "record": {
        "name": "@opam/tyxml",
        "version": "opam:4.2.0",
        "source":
          "archive:https://github.com/ocsigen/tyxml/archive/4.2.0.tar.gz#md5:c802f3c7036adcea3fc00398c23d1b2b",
        "files": [
          {
            "name": "tyxml.install",
            "content":
              "lib: \"tyxml.opam\" { \"opam\" }\ndoc: [\n  \"README.md\"\n  \"CHANGES\"\n  \"COPYING\" { \"LICENSE\" }\n]\n",
            "perm": 438
          }
        ],
        "opam": {
          "name": "tyxml",
          "version": "4.2.0",
          "opam":
            "opam-version: \"2.0\"\nname: \"tyxml\"\nversion: \"4.2.0\"\nsynopsis:\n  \"TyXML is a library for building statically correct HTML5 and SVG documents\"\ndescription: \"\"\"\nTyXML allows you to build HTML5 and SVG trees whose validity is ensured by the typechecker.\nIt provides a printer for said XML trees, along with a ppx syntax extension.\nFinally it also provides a functorial interface to choose your XML datastructure.\nIt's part of the ocsigen project and is used in js_of_ocaml and eliom.\"\"\"\nmaintainer: \"dev@ocsigen.org\"\nauthors: \"The ocsigen team\"\nhomepage: \"https://ocsigen.org/tyxml/\"\ndoc: \"https://ocsigen.org/tyxml/manual/\"\nbug-reports: \"https://github.com/ocsigen/tyxml/issues\"\ndepends: [\n  \"ocaml\" {>= \"4.02\"}\n  \"ocamlfind\" {build}\n  \"ocamlbuild\" {build}\n  \"uchar\"\n  \"uutf\" {>= \"1.0.0\"}\n  \"base-bytes\"\n  \"re\" {>= \"1.5.0\"}\n  \"alcotest\" {with-test}\n]\ndepopts: [\"camlp4\" \"markup\" \"ppx_tools_versioned\"]\nflags: light-uninstall\nbuild: [\n  [\n    \"ocaml\"\n    \"setup.ml\"\n    \"-configure\"\n    \"--%{camlp4:enable}%-syntax\"\n    \"--%{markup+ppx_tools_versioned:enable}%-ppx\"\n    \"--prefix\"\n    prefix\n  ]\n  [\"ocaml\" \"setup.ml\" \"-build\"]\n  [\n    \"ocaml\"\n    \"setup.ml\"\n    \"-configure\"\n    \"--%{camlp4:enable}%-syntax\"\n    \"--%{markup+ppx_tools_versioned:enable}%-ppx\"\n    \"--enable-tests\"\n    \"--prefix\"\n    prefix\n  ] {with-test}\n  [\"ocaml\" \"setup.ml\" \"-build\"] {with-test}\n  [\"ocaml\" \"setup.ml\" \"-test\"] {with-test}\n  [\"ocaml\" \"setup.ml\" \"-doc\"] {with-doc}\n]\ninstall: [\"ocaml\" \"setup.ml\" \"-install\"]\nremove: [\"ocamlfind\" \"remove\" \"tyxml\"]\nmessages: [\n  \"For tyxml's ppx, please install tyxml-ppx.\"\n    {!markup:installed | !ppx_tools_versioned:installed}\n  \"Tyxml's camlp4-based libraries (tyxml.syntax and tyxml.parser) are now deprecated and will be removed in the next major version.\"\n    {camlp4:installed}\n]\ndev-repo: \"git+https://github.com/ocsigen/tyxml.git\"\nextra-files: [\"tyxml.install\" \"md5=c5877ac0f3060afc7dbbb9ac65f76e0a\"]\nurl {\n  src: \"https://github.com/ocsigen/tyxml/archive/4.2.0.tar.gz\"\n  checksum: \"md5=c802f3c7036adcea3fc00398c23d1b2b\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/base-bytes@opam:base",
        "@opam/ocamlbuild@opam:0", "@opam/ocamlfind@opam:1.8.0",
        "@opam/re@opam:1.7.3", "@opam/uchar@opam:0.0.2",
        "@opam/uutf@opam:1.0.1", "ocaml@4.2.3006"
      ]
    },
    "@opam/topkg@opam:1.0.0": {
      "record": {
        "name": "@opam/topkg",
        "version": "opam:1.0.0",
        "source":
          "archive:http://erratique.ch/software/topkg/releases/topkg-1.0.0.tbz#md5:e3d76bda06bf68cb5853caf6627da603",
        "files": [],
        "opam": {
          "name": "topkg",
          "version": "1.0.0",
          "opam":
            "opam-version: \"2.0\"\nname: \"topkg\"\nversion: \"1.0.0\"\nsynopsis: \"The transitory OCaml software packager\"\ndescription: \"\"\"\nTopkg is a packager for distributing OCaml software. It provides an\nAPI to describe the files a package installs in a given build\nconfiguration and to specify information about the package's\ndistribution, creation and publication procedures.\n\nThe optional topkg-care package provides the `topkg` command line tool\nwhich helps with various aspects of a package's life cycle: creating\nand linting a distribution, releasing it on the WWW, publish its\ndocumentation, add it to the OCaml opam repository, etc.\n\nTopkg is distributed under the ISC license and has **no**\ndependencies. This is what your packages will need as a *build*\ndependency.\n\nTopkg-care is distributed under the ISC license it depends on\n[fmt][fmt], [logs][logs], [bos][bos], [cmdliner][cmdliner],\n[webbrowser][webbrowser] and `opam-format`.\n\n[fmt]: http://erratique.ch/software/fmt\n[logs]: http://erratique.ch/software/logs\n[bos]: http://erratique.ch/software/bos\n[cmdliner]: http://erratique.ch/software/cmdliner\n[webbrowser]: http://erratique.ch/software/webbrowser\"\"\"\nmaintainer: \"Daniel B端nzli <daniel.buenzl i@erratique.ch>\"\nauthors: \"Daniel B端nzli <daniel.buenzl i@erratique.ch>\"\nlicense: \"ISC\"\ntags: [\"packaging\" \"ocamlbuild\" \"org:erratique\"]\nhomepage: \"http://erratique.ch/software/topkg\"\ndoc: \"http://erratique.ch/software/topkg/doc\"\nbug-reports: \"https://github.com/dbuenzli/topkg/issues\"\ndepends: [\n  \"ocaml\" {>= \"4.01.0\"}\n  \"ocamlfind\" {build & >= \"1.6.1\"}\n  \"ocamlbuild\"\n  \"result\"\n]\nbuild: [\n  \"ocaml\" \"pkg/pkg.ml\" \"build\" \"--pkg-name\" name \"--dev-pkg\" \"%{pinned}%\"\n]\ndev-repo: \"git+http://erratique.ch/repos/topkg.git\"\nurl {\n  src: \"http://erratique.ch/software/topkg/releases/topkg-1.0.0.tbz\"\n  checksum: \"md5=e3d76bda06bf68cb5853caf6627da603\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/ocamlbuild@opam:0",
        "@opam/ocamlfind@opam:1.8.0", "@opam/result@opam:1.3",
        "ocaml@4.2.3006"
      ]
    },
    "@opam/sexplib@github:bryphe/sexplib#548f94d": {
      "record": {
        "name": "@opam/sexplib",
        "version": "github:bryphe/sexplib#548f94d",
        "source": "github:bryphe/sexplib#548f94d",
        "files": [],
        "opam": null
      },
      "dependencies": []
    },
    "@opam/rresult@opam:0.6.0": {
      "record": {
        "name": "@opam/rresult",
        "version": "opam:0.6.0",
        "source":
          "archive:http://erratique.ch/software/rresult/releases/rresult-0.6.0.tbz#md5:aba88cffa29081714468c2c7bcdf7fb1",
        "files": [],
        "opam": {
          "name": "rresult",
          "version": "0.6.0",
          "opam":
            "opam-version: \"2.0\"\nname: \"rresult\"\nversion: \"0.6.0\"\nsynopsis: \"Result value combinators for OCaml\"\ndescription: \"\"\"\nRresult is an OCaml module for handling computation results and errors\nin an explicit and declarative manner, without resorting to\nexceptions. It defines combinators to operate on the `result` type\navailable from OCaml 4.03 in the standard library.\n\nRresult depends on the compatibility `result` package and is\ndistributed under the ISC license.\"\"\"\nmaintainer: \"Daniel B端nzli <daniel.buenzl i@erratique.ch>\"\nauthors: \"Daniel B端nzli <daniel.buenzl i@erratique.ch>\"\nlicense: \"ISC\"\ntags: [\"result\" \"error\" \"declarative\" \"org:erratique\"]\nhomepage: \"http://erratique.ch/software/rresult\"\ndoc: \"http://erratique.ch/software/rresult\"\nbug-reports: \"https://github.com/dbuenzli/rresult/issues\"\ndepends: [\n  \"ocaml\" {>= \"4.01.0\"}\n  \"ocamlfind\" {build}\n  \"ocamlbuild\" {build}\n  \"topkg\" {build}\n  \"result\"\n]\nbuild: [\"ocaml\" \"pkg/pkg.ml\" \"build\" \"--pinned\" \"%{pinned}%\"]\ndev-repo: \"git+http://erratique.ch/repos/rresult.git\"\nurl {\n  src: \"http://erratique.ch/software/rresult/releases/rresult-0.6.0.tbz\"\n  checksum: \"md5=aba88cffa29081714468c2c7bcdf7fb1\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/ocamlbuild@opam:0",
        "@opam/ocamlfind@opam:1.8.0", "@opam/result@opam:1.3",
        "@opam/topkg@opam:1.0.0", "ocaml@4.2.3006"
      ]
    },
    "@opam/result@opam:1.3": {
      "record": {
        "name": "@opam/result",
        "version": "opam:1.3",
        "source":
          "archive:https://github.com/janestreet/result/releases/download/1.3/result-1.3.tbz#md5:4beebefd41f7f899b6eeba7414e7ae01",
        "files": [],
        "opam": {
          "name": "result",
          "version": "1.3",
          "opam":
            "opam-version: \"2.0\"\nname: \"result\"\nversion: \"1.3\"\nsynopsis: \"Compatibility Result module\"\ndescription: \"\"\"\nProjects that want to use the new result type defined in OCaml >= 4.03\nwhile staying compatible with older version of OCaml should use the\nResult module defined in this library.\"\"\"\nmaintainer: \"opensource@janestreet.com\"\nauthors: \"Jane Street Group, LLC <opensource@janestreet.com>\"\nlicense: \"BSD3\"\nhomepage: \"https://github.com/janestreet/result\"\nbug-reports: \"https://github.com/janestreet/result/issues\"\ndepends: [\n  \"ocaml\"\n  \"jbuilder\" {build & >= \"1.0+beta11\"}\n]\nbuild: [\"jbuilder\" \"build\" \"-p\" name \"-j\" jobs]\ndev-repo: \"git+https://github.com/janestreet/result.git\"\nurl {\n  src:\n    \"https://github.com/janestreet/result/releases/download/1.3/result-1.3.tbz\"\n  checksum: \"md5=4beebefd41f7f899b6eeba7414e7ae01\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/jbuilder@opam:transition",
        "ocaml@4.2.3006"
      ]
    },
    "@opam/re@opam:1.7.3": {
      "record": {
        "name": "@opam/re",
        "version": "opam:1.7.3",
        "source":
          "archive:https://github.com/ocaml/ocaml-re/releases/download/1.7.3/re-1.7.3.tbz#md5:d2a74ca77216861bce4449600a132de9",
        "files": [],
        "opam": {
          "name": "re",
          "version": "1.7.3",
          "opam":
            "opam-version: \"2.0\"\nname: \"re\"\nversion: \"1.7.3\"\nsynopsis: \"RE is a regular expression library for OCaml\"\ndescription: \"\"\"\nPure OCaml regular expressions with:\n* Perl-style regular expressions (module Re.Perl)\n* Posix extended regular expressions (module Re.Posix)\n* Emacs-style regular expressions (module Re.Emacs)\n* Shell-style file globbing (module Re.Glob)\n* Compatibility layer for OCaml's built-in Str module (module Re.Str)\"\"\"\nmaintainer: \"rudi.grinberg@gmail.com\"\nauthors: [\n  \"Jerome Vouillon\"\n  \"Thomas Gazagnaire\"\n  \"Anil Madhavapeddy\"\n  \"Rudi Grinberg\"\n  \"Gabriel Radanne\"\n]\nlicense: \"LGPL-2.0 with OCaml linking exception\"\nhomepage: \"https://github.com/ocaml/ocaml-re\"\nbug-reports: \"https://github.com/ocaml/ocaml-re/issues\"\ndepends: [\n  \"ocaml\" {>= \"4.02.3\"}\n  \"jbuilder\" {build & >= \"1.0+beta10\"}\n  \"ounit\" {with-test}\n]\nbuild: [\n  [\"jbuilder\" \"subst\" \"-p\" name] {pinned}\n  [\"jbuilder\" \"build\" \"-p\" name \"-j\" jobs]\n  [\"jbuilder\" \"runtest\" \"-p\" name \"-j\" jobs] {with-test}\n]\ndev-repo: \"git+https://github.com/ocaml/ocaml-re.git\"\nurl {\n  src:\n    \"https://github.com/ocaml/ocaml-re/releases/download/1.7.3/re-1.7.3.tbz\"\n  checksum: \"md5=d2a74ca77216861bce4449600a132de9\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/jbuilder@opam:transition",
        "ocaml@4.2.3006"
      ]
    },
    "@opam/ppx_tools_versioned@opam:5.2.1": {
      "record": {
        "name": "@opam/ppx_tools_versioned",
        "version": "opam:5.2.1",
        "source":
          "archive:https://github.com/ocaml-ppx/ppx_tools_versioned/archive/5.2.1.tar.gz#md5:1ae6ae43ec161fbbf12c2b4d3a7e26f5",
        "files": [],
        "opam": {
          "name": "ppx_tools_versioned",
          "version": "5.2.1",
          "opam":
            "opam-version: \"2.0\"\nname: \"ppx_tools_versioned\"\nversion: \"5.2.1\"\nsynopsis: \"A variant of ppx_tools based on ocaml-migrate-parsetree\"\nmaintainer: \"frederic.bour@lakaban.net\"\nauthors: [\n  \"Fr辿d辿ric Bour <frederic.bour@lakaban.net>\"\n  \"Alain Frisch <alain.frisch@lexifi.com>\"\n]\nlicense: \"MIT\"\ntags: \"syntax\"\nhomepage: \"https://github.com/let-def/ppx_tools_versioned\"\nbug-reports: \"https://github.com/let-def/ppx_tools_versioned/issues\"\ndepends: [\n  \"ocaml\" {>= \"4.02.0\"}\n  \"jbuilder\" {build & >= \"1.0+beta17\"}\n  \"ocaml-migrate-parsetree\" {>= \"1.0.10\"}\n]\nbuild: [\n  [\"jbuilder\" \"subst\" \"-p\" name] {pinned}\n  [\"jbuilder\" \"build\" \"-p\" name \"-j\" jobs]\n  [\"jbuilder\" \"runtest\" \"-p\" name \"-j\" jobs] {with-test}\n]\ndev-repo: \"git://github.com/let-def/ppx_tools_versioned.git\"\nurl {\n  src:\n    \"https://github.com/ocaml-ppx/ppx_tools_versioned/archive/5.2.1.tar.gz\"\n  checksum: \"md5=1ae6ae43ec161fbbf12c2b4d3a7e26f5\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/jbuilder@opam:transition",
        "@opam/ocaml-migrate-parsetree@opam:1.1.0", "ocaml@4.2.3006"
      ]
    },
    "@opam/ocamlmod@opam:0.0.9": {
      "record": {
        "name": "@opam/ocamlmod",
        "version": "opam:0.0.9",
        "source":
          "archive:https://forge.ocamlcore.org/frs/download.php/1702/ocamlmod-0.0.9.tar.gz#md5:b52bfbab6bb77f9736bde9c2fe81c508",
        "files": [
          {
            "name": "_oasis_remove_.ml",
            "content":
              "open Printf\n\nlet () =\n  let dir = Sys.argv.(1) in\n  (try Sys.chdir dir\n   with _ -> eprintf \"Cannot change directory to %s\\n%!\" dir);\n  exit (Sys.command \"ocaml setup.ml -uninstall\")\n",
            "perm": 438
          },
          {
            "name": "ocamlmod.install",
            "content":
              "etc: [\n  \"setup.ml\"\n  \"setup.data\"\n  \"setup.log\"\n  \"_oasis_remove_.ml\"\n]\n",
            "perm": 438
          }
        ],
        "opam": {
          "name": "ocamlmod",
          "version": "0.0.9",
          "opam":
            "opam-version: \"2.0\"\nname: \"ocamlmod\"\nversion: \"0.0.9\"\nsynopsis: \"Generate OCaml modules from source files\"\nmaintainer: \"opam-devel@lists.ocaml.org\"\nauthors: \"Sylvain Le Gall\"\nlicense: \"LGPL-2.1 with OCaml linking exception\"\nhomepage: \"https://forge.ocamlcore.org/projects/ocamlmod/\"\nbug-reports: \"https://forge.ocamlcore.org/tracker/?group_id=244\"\ndepends: [\n  \"ocaml\"\n  \"ocamlfind\" {build}\n  \"ounit\" {with-test & >= \"2.0.0\"}\n  \"ocamlbuild\" {build}\n]\nbuild: [\n  [\"ocaml\" \"setup.ml\" \"-configure\" \"--prefix\" prefix]\n  [\"ocaml\" \"setup.ml\" \"-build\"]\n  [\"ocaml\" \"setup.ml\" \"-configure\" \"--enable-tests\"] {with-test}\n  [\"ocaml\" \"setup.ml\" \"-build\"] {with-test}\n  [\"ocaml\" \"setup.ml\" \"-test\"] {with-test}\n]\ninstall: [\"ocaml\" \"setup.ml\" \"-install\"]\nremove: [\"ocaml\" \"%{etc}%/ocamlmod/_oasis_remove_.ml\" \"%{etc}%/ocamlmod\"]\ndev-repo:\n  \"darcs+ssh://https//forge.ocamlcore.org/anonscm/darcs/ocamlmod/ocamlmod\"\nextra-files: [\n  [\"ocamlmod.install\" \"md5=0d1b822c897681cf54b3e1aed52dda99\"]\n  [\"_oasis_remove_.ml\" \"md5=6100ca146fa97d2196eb49a2631d0796\"]\n]\nurl {\n  src:\n    \"https://forge.ocamlcore.org/frs/download.php/1702/ocamlmod-0.0.9.tar.gz\"\n  checksum: \"md5=b52bfbab6bb77f9736bde9c2fe81c508\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/ocamlbuild@opam:0",
        "@opam/ocamlfind@opam:1.8.0", "ocaml@4.2.3006"
      ]
    },
    "@opam/ocamlify@opam:0.0.1": {
      "record": {
        "name": "@opam/ocamlify",
        "version": "opam:0.0.1",
        "source":
          "archive:http://forge.ocamlcore.org/frs/download.php/379/ocamlify-0.0.1.tar.gz#md5:bcd97ad0f7203019019997197451dbf0",
        "files": [
          {
            "name": "ocamlify.install",
            "content": "bin: [\"_build/src/ocamlify\"]\n",
            "perm": 438
          }
        ],
        "opam": {
          "name": "ocamlify",
          "version": "0.0.1",
          "opam":
            "opam-version: \"2.0\"\nname: \"ocamlify\"\nversion: \"0.0.1\"\nsynopsis: \"Include files in OCaml code\"\ndescription: \"\"\"\nOCamlify allows to create OCaml source code by including whole files\ninto OCaml string or string list. The code generated can be compiled\nas a standard OCaml file. It allows embedding external resources as\nOCaml code.\"\"\"\nmaintainer: \"https://github.com/ocaml/opam-repository/issues\"\ndepends: [\n  \"ocaml\"\n  \"ocamlfind\"\n  \"ocamlbuild\" {build}\n]\nbuild: [\n  [\"ocaml\" \"setup.ml\" \"-configure\" \"--prefix\" prefix]\n  [\"ocaml\" \"setup.ml\" \"-build\"]\n]\ninstall: [\"ocaml\" \"setup.ml\" \"-install\"]\nextra-files: [\"ocamlify.install\" \"md5=5ae3ee90457ab5a6051136a36885c67e\"]\nurl {\n  src:\n    \"http://forge.ocamlcore.org/frs/download.php/379/ocamlify-0.0.1.tar.gz\"\n  checksum: \"md5=bcd97ad0f7203019019997197451dbf0\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/ocamlbuild@opam:0",
        "@opam/ocamlfind@opam:1.8.0", "ocaml@4.2.3006"
      ]
    },
    "@opam/ocamlfind@opam:1.8.0": {
      "record": {
        "name": "@opam/ocamlfind",
        "version": "opam:1.8.0",
        "source": [
          "archive:http://download.camlcity.org/download/findlib-1.8.0.tar.gz#md5:a710c559667672077a93d34eb6a42e5b",
          "archive:http://download2.camlcity.org/download/findlib-1.8.0.tar.gz#md5:a710c559667672077a93d34eb6a42e5b"
        ],
        "files": [
          {
            "name": "ocamlfind.install",
            "content":
              "bin: [\n  \"src/findlib/ocamlfind\" {\"ocamlfind\"}\n  \"?src/findlib/ocamlfind_opt\" {\"ocamlfind\"}\n  \"?tools/safe_camlp4\"\n]\ntoplevel: [\"src/findlib/topfind\"]\n",
            "perm": 438
          },
          {
            "name": "ocaml-stub",
            "content":
              "#!/bin/sh\n\nBINDIR=$(dirname \"$(command -v ocamlc)\")\n\"$BINDIR/ocaml\" -I \"$OCAML_TOPLEVEL_PATH\" \"$@\"\n",
            "perm": 438
          },
          {
            "name": "findlib-1.8.0.patch",
            "content":
              "--- ./Makefile\n+++ ./Makefile\n@@ -57,16 +57,16 @@\n \tcat findlib.conf.in | \\\n \t    $(SH) tools/patch '@SITELIB@' '$(OCAML_SITELIB)' >findlib.conf\n \tif ./tools/cmd_from_same_dir ocamlc; then \\\n-\t\techo 'ocamlc=\"ocamlc.opt\"' >>findlib.conf; \\\n+\t\techo 'ocamlc=\"ocamlc.opt$(EXEC_SUFFIX)\"' >>findlib.conf; \\\n \tfi\n \tif ./tools/cmd_from_same_dir ocamlopt; then \\\n-\t\techo 'ocamlopt=\"ocamlopt.opt\"' >>findlib.conf; \\\n+\t\techo 'ocamlopt=\"ocamlopt.opt$(EXEC_SUFFIX)\"' >>findlib.conf; \\\n \tfi\n \tif ./tools/cmd_from_same_dir ocamldep; then \\\n-\t\techo 'ocamldep=\"ocamldep.opt\"' >>findlib.conf; \\\n+\t\techo 'ocamldep=\"ocamldep.opt$(EXEC_SUFFIX)\"' >>findlib.conf; \\\n \tfi\n \tif ./tools/cmd_from_same_dir ocamldoc; then \\\n-\t\techo 'ocamldoc=\"ocamldoc.opt\"' >>findlib.conf; \\\n+\t\techo 'ocamldoc=\"ocamldoc.opt$(EXEC_SUFFIX)\"' >>findlib.conf; \\\n \tfi\n \n .PHONY: install-doc\n--- ./src/findlib/findlib_config.mlp\n+++ ./src/findlib/findlib_config.mlp\n@@ -24,3 +24,5 @@\n     | \"MacOS\" -> \"\"        (* don't know *)\n     | _ -> failwith \"Unknown Sys.os_type\"\n ;;\n+\n+let exec_suffix = \"@EXEC_SUFFIX@\";;\n--- ./src/findlib/findlib.ml\n+++ ./src/findlib/findlib.ml\n@@ -28,15 +28,20 @@\n let conf_ldconf = ref \"\";;\n let conf_ignore_dups_in = ref ([] : string list);;\n \n-let ocamlc_default = \"ocamlc\";;\n-let ocamlopt_default = \"ocamlopt\";;\n-let ocamlcp_default = \"ocamlcp\";;\n-let ocamloptp_default = \"ocamloptp\";;\n-let ocamlmklib_default = \"ocamlmklib\";;\n-let ocamlmktop_default = \"ocamlmktop\";;\n-let ocamldep_default = \"ocamldep\";;\n-let ocamlbrowser_default = \"ocamlbrowser\";;\n-let ocamldoc_default = \"ocamldoc\";;\n+let add_exec str =\n+  match Findlib_config.exec_suffix with\n+  | \"\" -> str\n+  | a  -> str ^ a ;;\n+let ocamlc_default = add_exec \"ocamlc\";;\n+let ocamlopt_default = add_exec \"ocamlopt\";;\n+let ocamlcp_default = add_exec \"ocamlcp\";;\n+let ocamloptp_default = add_exec \"ocamloptp\";;\n+let ocamlmklib_default = add_exec \"ocamlmklib\";;\n+let ocamlmktop_default = add_exec \"ocamlmktop\";;\n+let ocamldep_default = add_exec \"ocamldep\";;\n+let ocamlbrowser_default = add_exec \"ocamlbrowser\";;\n+let ocamldoc_default = add_exec \"ocamldoc\";;\n+\n \n \n let init_manually \n--- ./src/findlib/fl_package_base.ml\n+++ ./src/findlib/fl_package_base.ml\n@@ -133,7 +133,15 @@\n \t  List.find (fun def -> def.def_var = \"exists_if\") p.package_defs  in\n \tlet files = Fl_split.in_words def.def_value in\n \tList.exists \n-\t  (fun file -> Sys.file_exists (Filename.concat d' file))\n+\t  (fun file ->\n+            let fln = Filename.concat d' file in\n+            let e = Sys.file_exists fln in\n+            (* necessary for ppx executables *)\n+            if e || Sys.os_type <> \"Win32\" || Filename.check_suffix fln \".exe\" then\n+              e\n+            else\n+              Sys.file_exists (fln ^ \".exe\")\n+          )\n \t  files\n       with Not_found -> true in\n \n--- ./src/findlib/fl_split.ml\n+++ ./src/findlib/fl_split.ml\n@@ -126,10 +126,17 @@\n     | '/' | '\\\\' -> true\n     | _ -> false in\n   let norm_dir_win() =\n-    if l >= 1 && s.[0] = '/' then\n-      Buffer.add_char b '\\\\' else Buffer.add_char b s.[0];\n-    if l >= 2 && s.[1] = '/' then\n-      Buffer.add_char b '\\\\' else Buffer.add_char b s.[1];\n+    if l >= 1 then (\n+      if s.[0] = '/' then\n+        Buffer.add_char b '\\\\'\n+      else\n+        Buffer.add_char b s.[0] ;\n+      if l >= 2 then\n+        if s.[1] = '/' then\n+          Buffer.add_char b '\\\\'\n+        else\n+          Buffer.add_char b s.[1];\n+    );\n     for k = 2 to l - 1 do\n       let c = s.[k] in\n       if is_slash c then (\n--- ./src/findlib/frontend.ml\n+++ ./src/findlib/frontend.ml\n@@ -31,10 +31,18 @@\n   else\n     Sys_error (arg ^ \": \" ^ Unix.error_message code)\n \n+let is_win = Sys.os_type = \"Win32\"\n+\n+let () =\n+  match Findlib_config.system with\n+    | \"win32\" | \"win64\" | \"mingw\" | \"cygwin\" | \"mingw64\" | \"cygwin64\" ->\n+      (try set_binary_mode_out stdout true with _ -> ());\n+      (try set_binary_mode_out stderr true with _ -> ());\n+    | _ -> ()\n \n let slashify s =\n   match Findlib_config.system with\n-    | \"mingw\" | \"mingw64\" | \"cygwin\" ->\n+    | \"win32\" | \"win64\" | \"mingw\" | \"cygwin\" | \"mingw64\" | \"cygwin64\" ->\n         let b = Buffer.create 80 in\n         String.iter\n           (function\n@@ -49,7 +57,7 @@\n \n let out_path ?(prefix=\"\") s =\n   match Findlib_config.system with\n-    | \"mingw\" | \"mingw64\" | \"cygwin\" ->\n+   | \"win32\" | \"win64\" | \"mingw\" | \"mingw64\" | \"cygwin\" ->\n \tlet u = slashify s in\n \tprefix ^ \n \t  (if String.contains u ' ' then\n@@ -273,11 +281,9 @@\n \n \n let identify_dir d =\n-  match Sys.os_type with\n-    | \"Win32\" ->\n-\tfailwith \"identify_dir\"   (* not available *)\n-    | _ ->\n-\tlet s = Unix.stat d in\n+  if is_win then\n+    failwith \"identify_dir\";   (* not available *)\n+  let s = Unix.stat d in\n \t(s.Unix.st_dev, s.Unix.st_ino)\n ;;\n \n@@ -459,6 +465,96 @@\n       )\n       packages\n \n+let rewrite_cmd s =\n+  if s = \"\" || not is_win then\n+    s\n+  else\n+    let s =\n+      let l = String.length s in\n+      let b = Buffer.create l in\n+      for i = 0 to pred l do\n+        match s.[i] with\n+        | '/' -> Buffer.add_char b '\\\\'\n+        | x -> Buffer.add_char b x\n+      done;\n+      Buffer.contents b\n+    in\n+    if (Filename.is_implicit s && String.contains s '\\\\' = false) ||\n+      Filename.check_suffix (String.lowercase s) \".exe\" then\n+      s\n+    else\n+      let s' = s ^ \".exe\" in\n+      if Sys.file_exists s' then\n+        s'\n+      else\n+        s\n+\n+let rewrite_cmd s =\n+  if s = \"\" || not is_win then s else\n+  let s =\n+    let l = String.length s in\n+    let b = Buffer.create l in\n+    for i = 0 to pred l do\n+      match s.[i] with\n+      | '/' -> Buffer.add_char b '\\\\'\n+      | x -> Buffer.add_char b x\n+    done;\n+    Buffer.contents b\n+  in\n+  if (Filename.is_implicit s && String.contains s '\\\\' = false) ||\n+     Filename.check_suffix (String.lowercase s) \".exe\" then\n+    s\n+  else\n+    let s' = s ^ \".exe\" in\n+    if Sys.file_exists s' then\n+      s'\n+    else\n+      s\n+\n+let rewrite_pp cmd =\n+  if not is_win then cmd else\n+  let module T = struct exception Keep end in\n+  let is_whitespace = function\n+  | ' ' | '\\011' | '\\012' | '\\n' | '\\r' | '\\t' -> true\n+  | _ -> false in\n+  (* characters that triggers special behaviour (cmd.exe, not unix shell) *)\n+  let is_unsafe_char = function\n+  | '(' | ')' | '%' | '!' | '^' | '<' | '>' | '&' -> true\n+  | _ -> false in\n+  let len = String.length cmd in\n+  let buf = Buffer.create (len + 4) in\n+  let buf_cmd = Buffer.create len in\n+  let rec iter_ws i =\n+    if i >= len then () else\n+    let cur = cmd.[i] in\n+    if is_whitespace cur then (\n+      Buffer.add_char buf cur;\n+      iter_ws (succ i)\n+    )\n+    else\n+      iter_cmd i\n+  and iter_cmd i =\n+    if i >= len then add_buf_cmd () else\n+    let cur = cmd.[i] in\n+    if is_unsafe_char cur || cur = '\"' || cur = '\\'' then\n+      raise T.Keep;\n+    if is_whitespace cur then (\n+      add_buf_cmd ();\n+      Buffer.add_substring buf cmd i (len - i)\n+    )\n+    else (\n+      Buffer.add_char buf_cmd cur;\n+      iter_cmd (succ i)\n+    )\n+  and add_buf_cmd () =\n+    if Buffer.length buf_cmd > 0 then\n+      Buffer.add_string buf (rewrite_cmd (Buffer.contents buf_cmd))\n+  in\n+  try\n+    iter_ws 0;\n+    Buffer.contents buf\n+  with\n+  | T.Keep -> cmd\n \n let process_pp_spec syntax_preds packages pp_opts =\n   (* Returns: pp_command *)\n@@ -549,7 +645,7 @@\n       None -> []\n     | Some cmd ->\n \t[\"-pp\";\n-\t cmd ^ \" \" ^\n+\t (rewrite_cmd cmd) ^ \" \" ^\n \t String.concat \" \" (List.map Filename.quote pp_i_options) ^ \" \" ^\n \t String.concat \" \" (List.map Filename.quote pp_archives) ^ \" \" ^\n \t String.concat \" \" (List.map Filename.quote pp_opts)]\n@@ -625,9 +721,11 @@\n           in\n           try\n             let preprocessor =\n+              rewrite_cmd (\n               resolve_path\n                 ~base ~explicit:true\n-                (package_property predicates pname \"ppx\") in\n+                  (package_property predicates pname \"ppx\") )\n+            in\n             [\"-ppx\"; String.concat \" \" (preprocessor :: options)]\n           with Not_found -> []\n        )\n@@ -895,6 +993,14 @@\n        switch (e.g. -L<path> instead of -L <path>)\n      *)\n \n+(* We may need to remove files on which we do not have complete control.\n+   On Windows, removing a read-only file fails so try to change the\n+   mode of the file first. *)\n+let remove_file fname =\n+  try Sys.remove fname\n+  with Sys_error _ when is_win ->\n+    (try Unix.chmod fname 0o666 with Unix.Unix_error _ -> ());\n+    Sys.remove fname\n \n let ocamlc which () =\n \n@@ -1022,9 +1128,12 @@\n               \n \t      \"-intf\", \n \t      Arg.String (fun s -> pass_files := !pass_files @ [ Intf(slashify s) ]);\n-              \n+\n \t      \"-pp\", \n-\t      Arg.String (fun s -> pp_specified := true; add_spec_fn \"-pp\" s);\n+\t      Arg.String (fun s -> pp_specified := true; add_spec_fn \"-pp\" (rewrite_pp s));\n+\n+              \"-ppx\",\n+              Arg.String (fun s -> add_spec_fn \"-ppx\" (rewrite_pp s));\n \t      \n \t      \"-thread\", \n \t      Arg.Unit (fun _ -> threads := threads_default);\n@@ -1237,7 +1346,7 @@\n     with\n       any ->\n \tclose_out initl;\n-\tSys.remove initl_file_name;\n+\tremove_file initl_file_name;\n \traise any\n   end;\n \n@@ -1245,9 +1354,9 @@\n     at_exit\n       (fun () ->\n \tlet tr f x = try f x with _ -> () in\n-\ttr Sys.remove initl_file_name;\n-\ttr Sys.remove (Filename.chop_extension initl_file_name ^ \".cmi\");\n-\ttr Sys.remove (Filename.chop_extension initl_file_name ^ \".cmo\");\n+\ttr remove_file initl_file_name;\n+\ttr remove_file (Filename.chop_extension initl_file_name ^ \".cmi\");\n+\ttr remove_file (Filename.chop_extension initl_file_name ^ \".cmo\");\n       );\n \n   let exclude_list = [ stdlibdir; threads_dir; vmthreads_dir ] in\n@@ -1493,7 +1602,9 @@\n \t  [ \"-v\", Arg.Unit (fun () -> verbose := Verbose);\n \t    \"-pp\", Arg.String (fun s ->\n \t\t\t\t pp_specified := true;\n-\t\t\t\t options := !options @ [\"-pp\"; s]);\n+\t\t\t\t options := !options @ [\"-pp\"; rewrite_pp s]);\n+            \"-ppx\", Arg.String (fun s ->\n+\t\t\t\t options := !options @ [\"-ppx\"; rewrite_pp s]);\n \t  ]\n       )\n     )\n@@ -1672,7 +1783,9 @@\n \t      Arg.String (fun s -> add_spec_fn \"-I\" (slashify (resolve_path s)));\n \n \t      \"-pp\", Arg.String (fun s -> pp_specified := true;\n-\t\t \t           add_spec_fn \"-pp\" s);\n+                           add_spec_fn \"-pp\" (rewrite_pp s));\n+              \"-ppx\", Arg.String (fun s -> add_spec_fn \"-ppx\" (rewrite_pp s));\n+\n \t    ]\n \t)\n     )\n@@ -1830,7 +1943,10 @@\n       output_string ch_out append;\n       close_out ch_out;\n       close_in ch_in;\n-      Unix.utimes outpath s.Unix.st_mtime s.Unix.st_mtime;\n+      (try Unix.utimes outpath s.Unix.st_mtime s.Unix.st_mtime\n+       with Unix.Unix_error(e,_,_) ->\n+         prerr_endline(\"Warning: setting utimes for \" ^ outpath\n+                       ^ \": \" ^ Unix.error_message e));\n \n       prerr_endline(\"Installed \" ^ outpath);\n     with\n@@ -1882,6 +1998,8 @@\n              Unix.openfile (Filename.concat dir owner_file) [Unix.O_RDONLY] 0 in\n            let f =\n              Unix.in_channel_of_descr fd in\n+           if is_win then\n+             set_binary_mode_in f false;\n            try\n              let line = input_line f in\n              let is_my_file = (line = pkg) in\n@@ -2208,7 +2326,7 @@\n     let lines = read_ldconf !ldconf in\n     let dlldir_norm = Fl_split.norm_dir dlldir in\n     let dlldir_norm_lc = string_lowercase_ascii dlldir_norm in\n-    let ci_filesys = (Sys.os_type = \"Win32\") in\n+    let ci_filesys = is_win in\n     let check_dir d =\n       let d' = Fl_split.norm_dir d in\n       (d' = dlldir_norm) || \n@@ -2356,7 +2474,7 @@\n       List.iter\n         (fun file ->\n            let absfile = Filename.concat dlldir file in\n-           Sys.remove absfile;\n+           remove_file absfile;\n            prerr_endline (\"Removed \" ^ absfile)\n         )\n         dll_files\n@@ -2365,7 +2483,7 @@\n     (* Remove the files from the package directory: *)\n     if Sys.file_exists pkgdir then begin\n       let files = Sys.readdir pkgdir in\n-      Array.iter (fun f -> Sys.remove (Filename.concat pkgdir f)) files;\n+      Array.iter (fun f -> remove_file (Filename.concat pkgdir f)) files;\n       Unix.rmdir pkgdir;\n       prerr_endline (\"Removed \" ^ pkgdir)\n     end\n@@ -2415,7 +2533,9 @@\n \n \n let print_configuration() =\n+  let sl = slashify in\n   let dir s =\n+    let s = sl s in\n     if Sys.file_exists s then\n       s\n     else\n@@ -2453,27 +2573,27 @@\n \t   if md = \"\" then \"the corresponding package directories\" else dir md\n \t  );\n \tPrintf.printf \"The standard library is assumed to reside in:\\n    %s\\n\"\n-\t  (Findlib.ocaml_stdlib());\n+    (sl (Findlib.ocaml_stdlib()));\n \tPrintf.printf \"The ld.conf file can be found here:\\n    %s\\n\"\n-\t  (Findlib.ocaml_ldconf());\n+    (sl (Findlib.ocaml_ldconf()));\n \tflush stdout\n     | Some \"conf\" ->\n-\tprint_endline Findlib_config.config_file\n+  print_endline (sl Findlib_config.config_file)\n     | Some \"path\" ->\n-\tList.iter print_endline (Findlib.search_path())\n+  List.iter ( fun x -> print_endline (sl x)) (Findlib.search_path())\n     | Some \"destdir\" ->\n-\tprint_endline (Findlib.default_location())\n+  print_endline ( sl (Findlib.default_location()))\n     | Some \"metadir\" ->\n-\tprint_endline (Findlib.meta_directory())\n+  print_endline ( sl (Findlib.meta_directory()))\n     | Some \"metapath\" ->\n         let mdir = Findlib.meta_directory() in\n         let ddir = Findlib.default_location() in\n-\tprint_endline \n-          (if mdir <> \"\" then mdir ^ \"/META.%s\" else ddir ^ \"/%s/META\")\n+  print_endline ( sl\n+          (if mdir <> \"\" then mdir ^ \"/META.%s\" else ddir ^ \"/%s/META\"))\n     | Some \"stdlib\" ->\n-\tprint_endline (Findlib.ocaml_stdlib())\n+  print_endline ( sl (Findlib.ocaml_stdlib()))\n     | Some \"ldconf\" ->\n-\tprint_endline (Findlib.ocaml_ldconf())\n+  print_endline ( sl (Findlib.ocaml_ldconf()))\n     | _ ->\n \tassert false\n ;;\n@@ -2481,7 +2601,7 @@\n \n let ocamlcall pkg cmd =\n   let dir = package_directory pkg in\n-  let path = Filename.concat dir cmd in\n+  let path = rewrite_cmd (Filename.concat dir cmd) in\n   begin\n     try Unix.access path [ Unix.X_OK ]\n     with\n@@ -2647,6 +2767,10 @@\n   | Sys_error f ->\n       prerr_endline (\"ocamlfind: \" ^ f);\n       exit 2\n+  | Unix.Unix_error (e, fn, f) ->\n+      prerr_endline (\"ocamlfind: \" ^ fn ^ \" \" ^ f\n+                     ^ \": \" ^ Unix.error_message e);\n+      exit 2\n   | Findlib.No_such_package(pkg,info) ->\n       prerr_endline (\"ocamlfind: Package `\" ^ pkg ^ \"' not found\" ^\n \t\t     (if info <> \"\" then \" - \" ^ info else \"\"));\n--- ./src/findlib/Makefile\n+++ ./src/findlib/Makefile\n@@ -90,6 +90,7 @@\n \tcat findlib_config.mlp | \\\n \t        $(SH) $(TOP)/tools/patch '@CONFIGFILE@' '$(OCAMLFIND_CONF)' | \\\n \t        $(SH) $(TOP)/tools/patch '@STDLIB@' '$(OCAML_CORE_STDLIB)' | \\\n+\t\t\t$(SH) $(TOP)/tools/patch '@EXEC_SUFFIX@' '$(EXEC_SUFFIX)' | \\\n \t\tsed -e 's;@AUTOLINK@;$(OCAML_AUTOLINK);g' \\\n \t\t    -e 's;@SYSTEM@;$(SYSTEM);g' \\\n \t\t     >findlib_config.ml\n@@ -113,7 +114,7 @@\n \t$(OCAMLC) -a -o num_top.cma $(NUMTOP_OBJECTS)\n \n clean:\n-\trm -f *.cmi *.cmo *.cma *.cmx *.a *.o *.cmxa \\\n+\trm -f *.cmi *.cmo *.cma *.cmx *.lib *.a *.o *.cmxa \\\n \t  fl_meta.ml findlib_config.ml findlib.mml topfind.ml topfind \\\n \t  ocamlfind$(EXEC_SUFFIX) ocamlfind_opt$(EXEC_SUFFIX)\n \n@@ -121,7 +122,7 @@\n \tmkdir -p \"$(prefix)$(OCAML_SITELIB)/$(NAME)\"\n \tmkdir -p \"$(prefix)$(OCAMLFIND_BIN)\"\n \ttest $(INSTALL_TOPFIND) -eq 0 || cp topfind \"$(prefix)$(OCAML_CORE_STDLIB)\"\n-\tfiles=`$(SH) $(TOP)/tools/collect_files $(TOP)/Makefile.config findlib.cmi findlib.mli findlib.cma findlib.cmxa findlib.a findlib.cmxs topfind.cmi topfind.mli fl_package_base.mli fl_package_base.cmi fl_metascanner.mli fl_metascanner.cmi fl_metatoken.cmi findlib_top.cma findlib_top.cmxa findlib_top.a findlib_top.cmxs findlib_dynload.cma findlib_dynload.cmxa findlib_dynload.a findlib_dynload.cmxs fl_dynload.mli fl_dynload.cmi META` && \\\n+\tfiles=`$(SH) $(TOP)/tools/collect_files $(TOP)/Makefile.config findlib.cmi findlib.mli findlib.cma findlib.cmxa findlib$(LIB_SUFFIX) findlib.cmxs topfind.cmi topfind.mli fl_package_base.mli fl_package_base.cmi fl_metascanner.mli fl_metascanner.cmi fl_metatoken.cmi findlib_top.cma findlib_top.cmxa findlib_top$(LIB_SUFFIX) findlib_top.cmxs findlib_dynload.cma findlib_dynload.cmxa findlib_dynload$(LIB_SUFFIX) findlib_dynload.cmxs fl_dynload.mli fl_dynload.cmi META` && \\\n \tcp $$files \"$(prefix)$(OCAML_SITELIB)/$(NAME)\"\n \tf=\"ocamlfind$(EXEC_SUFFIX)\"; { test -f ocamlfind_opt$(EXEC_SUFFIX) && f=\"ocamlfind_opt$(EXEC_SUFFIX)\"; }; \\\n \tcp $$f \"$(prefix)$(OCAMLFIND_BIN)/ocamlfind$(EXEC_SUFFIX)\"\n",
            "perm": 438
          }
        ],
        "opam": {
          "name": "ocamlfind",
          "version": "1.8.0",
          "opam":
            "opam-version: \"2.0\"\nname: \"ocamlfind\"\nversion: \"1.8.0\"\nsynopsis: \"A library manager for OCaml\"\ndescription: \"\"\"\nFindlib is a library manager for OCaml. It provides a convention how\nto store libraries, and a file format (\"META\") to describe the\nproperties of libraries. There is also a tool (ocamlfind) for\ninterpreting the META files, so that it is very easy to use libraries\nin programs and scripts.\"\"\"\nmaintainer: \"Thomas Gazagnaire <thomas@gazagnaire.org>\"\nauthors: \"Gerd Stolpmann <gerd@gerd-stolpmann.de>\"\nhomepage: \"http://projects.camlcity.org/projects/findlib.html\"\nbug-reports: \"https://gitlab.camlcity.org/gerd/lib-findlib/issues\"\ndepends: [\n  \"ocaml\" {>= \"4.00.0\"}\n  \"conf-m4\" {build}\n]\nbuild: [\n  [\n    \"./configure\"\n    \"-bindir\"\n    bin\n    \"-sitelib\"\n    lib\n    \"-mandir\"\n    man\n    \"-config\"\n    \"%{lib}%/findlib.conf\"\n    \"-no-custom\"\n    \"-no-topfind\" {ocaml:preinstalled}\n  ]\n  [make \"all\"]\n  [make \"opt\"] {ocaml:native}\n]\ninstall: [\n  [make \"install\"]\n  [\"install\" \"-m\" \"0755\" \"ocaml-stub\" \"%{bin}%/ocaml\"] {ocaml:preinstalled}\n]\nremove: [\n  [\"ocamlfind\" \"remove\" \"bytes\"]\n  [\n    \"./configure\"\n    \"-bindir\"\n    bin\n    \"-sitelib\"\n    lib\n    \"-mandir\"\n    man\n    \"-config\"\n    \"%{lib}%/findlib.conf\"\n    \"-no-topfind\" {ocaml:preinstalled}\n  ]\n  [make \"uninstall\"]\n  [\"rm\" \"-f\" \"%{bin}%/ocaml\"] {ocaml:preinstalled}\n]\ndev-repo: \"git+https://gitlab.camlcity.org/gerd/lib-findlib.git\"\nextra-files: [\n  [\"ocamlfind.install\" \"md5=06f2c282ab52d93aa6adeeadd82a2543\"]\n  [\"ocaml-stub\" \"md5=181f259c9e0bad9ef523e7d4abfdf87a\"]\n]\nurl {\n  src: \"http://download.camlcity.org/download/findlib-1.8.0.tar.gz\"\n  checksum: \"md5=a710c559667672077a93d34eb6a42e5b\"\n  mirrors: \"http://download2.camlcity.org/download/findlib-1.8.0.tar.gz\"\n}",
          "override": {
            "build": [
              [
                "bash", "-c",
                "#{os == 'windows' ? 'patch -p1 < findlib-1.8.0.patch' : 'true'}"
              ],
              [
                "./configure", "-bindir", "#{self.bin}", "-sitelib",
                "#{self.lib}", "-mandir", "#{self.man}", "-config",
                "#{self.lib}/findlib.conf", "-no-custom", "-no-topfind"
              ],
              [ "make", "all" ],
              [ "make", "opt" ]
            ],
            "install": [
              [ "make", "install" ],
              [ "install", "-m", "0755", "ocaml-stub", "#{self.bin}/ocaml" ],
              [ "mkdir", "-p", "#{self.toplevel}" ],
              [
                "install", "-m", "0644", "src/findlib/topfind",
                "#{self.toplevel}/topfind"
              ]
            ],
            "exportedEnv": {
              "OCAML_TOPLEVEL_PATH": {
                "val": "#{self.toplevel}",
                "scope": "global",
                "exclusive": false
              }
            }
          }
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/conf-m4@opam:1", "ocaml@4.2.3006"
      ]
    },
    "@opam/ocamlbuild@opam:0": {
      "record": {
        "name": "@opam/ocamlbuild",
        "version": "opam:0",
        "source": "no-source:",
        "files": [],
        "opam": {
          "name": "ocamlbuild",
          "version": "0",
          "opam":
            "opam-version: \"2.0\"\nname: \"ocamlbuild\"\nversion: \"0\"\nsynopsis:\n  \"Build system distributed with the OCaml compiler since OCaml 3.10.0\"\nmaintainer: \"Gabriel Scherer <gabriel.scherer@gmail.com>\"\nauthors: [\"Nicolas Pouillard\" \"Berke Durak\"]\nlicense: \"LGPL-2 with OCaml linking exception\"\nhomepage: \"https://github.com/ocaml/ocaml\"\ndoc: [\n  \"http://caml.inria.fr/pub/docs/manual-ocaml/ocamlbuild.html\"\n  \"https://github.com/gasche/manual-ocamlbuild/blob/master/manual.md\"\n]\nbug-reports: \"http://caml.inria.fr/mantis/\"\ndepends: [\"ocaml\" \"base-ocamlbuild\"]\ndev-repo: \"git+https://github.com/ocaml/ocaml.git\"",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/base-ocamlbuild@opam:base",
        "ocaml@4.2.3006"
      ]
    },
    "@opam/ocaml-migrate-parsetree@opam:1.1.0": {
      "record": {
        "name": "@opam/ocaml-migrate-parsetree",
        "version": "opam:1.1.0",
        "source":
          "archive:https://github.com/ocaml-ppx/ocaml-migrate-parsetree/releases/download/v1.1.0/ocaml-migrate-parsetree-1.1.0.tbz#md5:7dd4808e27af98065f63604c9658d311",
        "files": [],
        "opam": {
          "name": "ocaml-migrate-parsetree",
          "version": "1.1.0",
          "opam":
            "opam-version: \"2.0\"\nname: \"ocaml-migrate-parsetree\"\nversion: \"1.1.0\"\nsynopsis: \"\"\ndescription: \"\"\"\nConvert OCaml parsetrees between different versions \n\nThis library converts parsetrees, outcometree and ast mappers between different OCaml versions.\nHigh-level functions help making PPX rewriters independent of a compiler version.\"\"\"\nmaintainer: \"frederic.bour@lakaban.net\"\nauthors: [\n  \"Fr辿d辿ric Bour <frederic.bour@lakaban.net>\"\n  \"J辿r辿mie Dimino <jeremie@dimino.org>\"\n]\nlicense: \"LGPL-2.1\"\ntags: [\"syntax\" \"org:ocamllabs\"]\nhomepage: \"https://github.com/ocaml-ppx/ocaml-migrate-parsetree\"\ndoc: \"https://ocaml-ppx.github.io/ocaml-migrate-parsetree/\"\nbug-reports: \"https://github.com/ocaml-ppx/ocaml-migrate-parsetree/issues\"\ndepends: [\n  \"result\"\n  \"dune\" {build}\n  \"ocaml\" {>= \"4.02.0\"}\n]\nbuild: [\"jbuilder\" \"build\" \"-p\" name \"-j\" jobs]\ndev-repo: \"git+https://github.com/ocaml-ppx/ocaml-migrate-parsetree.git\"\nurl {\n  src:\n    \"https://github.com/ocaml-ppx/ocaml-migrate-parsetree/releases/download/v1.1.0/ocaml-migrate-parsetree-1.1.0.tbz\"\n  checksum: \"md5=7dd4808e27af98065f63604c9658d311\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/dune@opam:1.3.0",
        "@opam/result@opam:1.3", "ocaml@4.2.3006"
      ]
    },
    "@opam/oasis@opam:0.4.11": {
      "record": {
        "name": "@opam/oasis",
        "version": "opam:0.4.11",
        "source":
          "archive:https://forge.ocamlcore.org/frs/download.php/1757/oasis-0.4.11.tar.gz#md5:98492f4657c2c5b30e3b1bc945e58419",
        "files": [
          {
            "name": "oasis.install",
            "content":
              "etc: [\n  \"setup.ml\"\n  \"setup.data\"\n  \"setup.log\"\n]\n",
            "perm": 438
          },
          {
            "name": "oasis-0.4.11.patch",
            "content":
              "--- ./myocamlbuild.ml\n+++ ./myocamlbuild.ml\n@@ -107,7 +107,7 @@\n ;;\n \n (* OASIS_START *)\n-(* DO NOT EDIT (digest: abd4c3624ec7c742aae7dbd96c89cd14) *)\n+(* DO NOT EDIT (digest: f54b1f8d97dfa848f6d79c1c3a40cf79) *)\n module OASISGettext = struct\n # 22 \"src/oasis/OASISGettext.ml\"\n \n@@ -279,6 +279,28 @@\n     else\n       s\n \n+  let exists f str =\n+    let rec iter i =\n+      if i < 0 then\n+        false\n+      else if f str.[i] then\n+        true\n+      else\n+        iter (pred i)\n+    in\n+      iter (String.length str - 1)\n+\n+  let is_digit c =\n+    '0' <= c && c <= '9'\n+\n+  let is_alpha c =\n+    ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')\n+\n+  let is_whitespace =\n+    function\n+      | ' ' | '\\r' | '\\n' | '\\t' -> true\n+      |  _  -> false\n+\n end\n \n module OASISUtils = struct\n@@ -542,7 +564,7 @@\n end\n \n \n-# 437 \"myocamlbuild.ml\"\n+# 459 \"myocamlbuild.ml\"\n module BaseEnvLight = struct\n # 22 \"src/base/BaseEnvLight.ml\"\n \n@@ -622,7 +644,7 @@\n end\n \n \n-# 517 \"myocamlbuild.ml\"\n+# 539 \"myocamlbuild.ml\"\n module MyOCamlbuildFindlib = struct\n # 22 \"src/plugins/ocamlbuild/MyOCamlbuildFindlib.ml\"\n \n@@ -699,7 +721,9 @@\n     with Not_found -> s\n \n   (* ocamlfind command *)\n-  let ocamlfind x = S[Sh (exec_from_conf \"ocamlfind\"); x]\n+  let ocamlfind x = S[Sh (\n+    Ocamlbuild_pack.Shell.quote_filename_if_needed\n+      (exec_from_conf \"ocamlfind\") ); x]\n \n   (* This lists all supported packages. *)\n   let find_packages () =\n@@ -983,7 +1007,7 @@\n end\n \n \n-# 878 \"myocamlbuild.ml\"\n+# 902 \"myocamlbuild.ml\"\n open Ocamlbuild_plugin;;\n let package_default =\n   {\n@@ -1283,7 +1307,7 @@\n \n let dispatch_default = MyOCamlbuildBase.dispatch_default conf package_default;;\n \n-# 1179 \"myocamlbuild.ml\"\n+# 1203 \"myocamlbuild.ml\"\n (* OASIS_STOP *)\n \n open Ocamlbuild_plugin;;\n--- ./setup.ml\n+++ ./setup.ml\n@@ -21,9 +21,9 @@\n (******************************************************************************)\n \n (* OASIS_START *)\n-(* DO NOT EDIT (digest: 6bf336bd3a817bf7523ab66c3f46186c) *)\n+(* DO NOT EDIT (digest: 4859873bfec85860f75d16694b510ed0) *)\n (*\n-   Regenerated by OASIS v0.4.11~HEAD\n+   Regenerated by OASIS v0.4.10\n    Visit http://oasis.forge.ocamlcore.org for more information and\n    documentation about functions used in this file.\n *)\n@@ -198,6 +198,28 @@\n     else\n       s\n \n+  let exists f str =\n+    let rec iter i =\n+      if i < 0 then\n+        false\n+      else if f str.[i] then\n+        true\n+      else\n+        iter (pred i)\n+    in\n+      iter (String.length str - 1)\n+\n+  let is_digit c =\n+    '0' <= c && c <= '9'\n+\n+  let is_alpha c =\n+    ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')\n+\n+  let is_whitespace =\n+    function\n+      | ' ' | '\\r' | '\\n' | '\\t' -> true\n+      |  _  -> false\n+\n end\n \n module OASISUtils = struct\n@@ -473,6 +495,118 @@\n \n   module Unix = OASISUnixPath\n \n+  let bash_cmd = ref ( fun () -> \"\" )\n+\n+  let use_bash () = ( !bash_cmd () ) <> \"\"\n+\n+\n+  (* generic quote and unixquote are taken from ocaml source *)\n+  let generic_quote quotequote s =\n+    let l = String.length s in\n+    let b = Buffer.create (l + 20) in\n+      Buffer.add_char b '\\'';\n+      for i = 0 to l - 1 do\n+        if s.[i] = '\\'' then\n+          Buffer.add_string b quotequote\n+        else\n+          Buffer.add_char b  s.[i]\n+      done;\n+      Buffer.add_char b '\\'';\n+      Buffer.contents b\n+\n+  let unixquote = generic_quote \"'\\\\''\"\n+\n+  let win = Sys.os_type = \"Win32\"\n+\n+  let quote str =\n+    if win && use_bash () then\n+      unixquote str\n+    else\n+      quote str\n+\n+  (* uniform_path (only called, if Sys.os_type = \"Win32\")\n+   * - enforces uniform path seperators\n+   * - strips trailing slashes (exceptions in case of C:\\ and / )\n+   * - removes (some) unnecessary file components like ./././\n+   *)\n+\n+  let get_naccu accu str first pos =\n+    (* I assume c//d is identic to c/d\n+     * the only exception (Network devices \\\\xyz\\asdf)\n+     * is covered in uniform_path\n+     *)\n+    if first = pos then\n+      accu\n+    else\n+      let nlen = pos - first in\n+      let nstr = String.sub str first nlen in\n+        (* test/././ is the same as test *)\n+        if nlen = 1 && nstr = \".\" then\n+          accu\n+        (* a/b/../ is the same as a *)\n+        else if nlen = 2 && nstr = \"..\" then\n+          match accu with\n+            | []      -> [ nstr ]\n+            | \"..\"::_ -> nstr::accu\n+            | hd::tl  -> tl\n+        else\n+          nstr::accu\n+\n+  let is_path_sep = function\n+    | '\\\\' | '/' -> true\n+    | _ -> false\n+\n+\n+  let uniform_path path_sep = function\n+    | \"\" -> \"\" (* Raise an exception? Or an possible intermediate result?\n+               * Filename.basename and dirname also don't raise exceptions *)\n+    | str ->\n+        let rec iter accu str len first pos =\n+          if pos >= len then\n+            List.rev (get_naccu accu str first pos)\n+          else\n+            let next = succ pos in\n+              match is_path_sep str.[pos] with\n+                | true -> iter (get_naccu accu str first pos) str len next next\n+                | false -> iter accu str len first next\n+        in\n+          let is_unix_root = is_path_sep str.[0] in\n+          let len = String.length str in\n+          let next_sep = len > 1 && is_path_sep str.[1] in\n+          let is_network_root = is_unix_root && next_sep in\n+          let is_currel = str.[0] = '.' && ( next_sep || len = 1 ) in\n+          let l = iter [] str len 0 0 in\n+          (* Trailing slashes are normally stripped.\n+           * This is not possible in case of root folders\n+           * Sys.file_exists \"C:\" is false, Sys.file_exists \"C:\\\\\" true\n+           *)\n+          let l_min =\n+            match l with\n+              | [] -> [ \"\" ]\n+              | _ -> l\n+          in\n+          let l =\n+            if is_network_root then\n+              \"\"::\"\"::l_min\n+            else if is_unix_root then\n+              \"\"::l_min\n+            else if is_currel then\n+              \".\"::l\n+            else\n+              match l with\n+                | s :: [] ->\n+                    (* root folders like C:\\ *)\n+                    if String.length s = 2 && s.[1] = ':' &&\n+                      len > 2 && is_path_sep str.[2]\n+                    then\n+                      s :: [ \"\" ]\n+                    else\n+                      l\n+                | _ -> l\n+          in\n+            String.concat path_sep l\n+\n+\n \n   let make =\n     function\n@@ -486,22 +620,31 @@\n     match Sys.os_type with\n     | \"Unix\" | \"Cygwin\" -> ufn\n     | \"Win32\" ->\n-      make\n-        (List.map\n-           (fun p ->\n-              if p = Unix.current_dir_name then\n-                current_dir_name\n-              else if p = Unix.parent_dir_name then\n-                parent_dir_name\n+      let path_sep =\n+        if use_bash () then\n+          \"/\"\n               else\n-                p)\n-           (OASISString.nsplit ufn '/'))\n+          \"\\\\\"\n+      in\n+      uniform_path path_sep ufn\n     | os_type ->\n       OASISUtils.failwithf\n         (f_ \"Don't know the path format of os_type %S when translating unix \\\n              filename. %S\")\n         os_type ufn\n \n+  (* see findlib's src/findlib/frontend.ml for details *)\n+  let ocamlfind_unquote dir =\n+    match Sys.os_type with\n+    | \"Cygwin\"\n+    | \"Win32\" ->\n+      let len = String.length dir in\n+      if len < 3 || dir.[0] <> '\"' || dir.[len - 1] <> '\"' ||\n+         String.contains dir ' ' = false then\n+        dir\n+      else\n+        String.sub dir 1 (len - 2)\n+    | _ -> dir\n \n end\n \n@@ -1084,8 +1227,8 @@\n \n \n   (* Range of allowed characters *)\n-  let is_digit c = '0' <= c && c <= '9'\n-  let is_alpha c = ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')\n+  let is_digit = OASISString.is_digit\n+  let is_alpha = OASISString.is_alpha\n   let is_special = function | '.' | '+' | '-' | '~' -> true | _ -> false\n \n \n@@ -2513,6 +2656,7 @@\n       ~ctxt\n       ~is_native\n       ~source_file_exists\n+      ~ext_obj\n       (cs, bs, obj) =\n \n     let find_module ext modul =\n@@ -2526,12 +2670,12 @@\n         | [ m ] -> (find_module \".cmi\" m,\n             find_module \".cmo\" m,\n             find_module \".cmx\" m,\n-            find_module \".o\" m,\n+            find_module ext_obj m,\n             fun x -> x)\n         | _ -> ([cs.cs_name ^ \".cmi\"],\n             [cs.cs_name ^ \".cmo\"],\n             [cs.cs_name ^ \".cmx\"],\n-            [cs.cs_name ^ \".o\"],\n+            [cs.cs_name ^ ext_obj],\n             OASISUnixPath.concat bs.bs_path)\n     in\n     List.map (List.map f) (\n@@ -2891,26 +3035,170 @@\n   open OASISUtils\n   open OASISMessage\n \n+  let is_dubious_char = function\n+    | '+' | '~' | ':' | '.' | '-' | '_' | '/' | '\\\\' -> false\n+    | c ->\n+      OASISString.is_digit c = false &&\n+      OASISString.is_alpha c = false\n+\n+\n+  let win_quote_needed str =\n+    let f = function\n+      | 'a' .. 'z'  | 'A' .. 'Z' | '0' .. '9'\n+      | '_' | '-' | '~' | '.' | ':' | ',' | '\\\\' -> false\n+      | _ -> true\n+    in\n+      str = \"\" || OASISString.exists f str\n+\n+  let is_simple_command str =\n+    String.length str > 0 &&\n+    not (OASISString.exists is_dubious_char str)\n+\n+  let is_path_sep = function\n+    | '/' | '\\\\' -> true\n+    | _ -> false\n+\n+  let starts_with_absolute_path cmd =\n+    let len = String.length cmd in\n+      if len < 3 then\n+        false\n+      else\n+        let c0 = cmd.[0] in\n+        let c1 = cmd.[1] in\n+          if is_path_sep c0 && is_path_sep c1 then (* network devices: \"//\" *)\n+            true\n+          else if len = 3 then\n+            false\n+          else  (* C:\\.... *)\n+            OASISString.is_alpha c0 && c1 = ':' && is_path_sep cmd.[2]\n \n-  (* TODO: I don't like this quote, it is there because $(rm) foo expands to\n-   * 'rm -f' foo...\n-  *)\n-  let run ~ctxt ?f_exit_code ?(quote=true) cmd args =\n+  let exe_exts = lazy\n+    begin\n+      let exts =\n+        try\n+          OASISString.nsplit\n+            (Sys.getenv \"PATHEXT\")\n+            ';'\n+        with\n+          | Not_found -> []\n+      in\n+      let exts' =\n+        List.filter\n+          ( fun a -> a <> \"\" && a.[0] = '.' && a <> \".exe\" )\n+          (List.map OASISString.lowercase_ascii exts)\n+      in\n+        \".exe\"::exts'\n+    end\n+\n+  let exe_file_exists fln =\n+    Sys.file_exists fln ||\n+    List.exists\n+      (fun a -> Sys.file_exists ( fln ^ a ) )\n+      (Lazy.force exe_exts)\n+\n+\n+  let quote_anyway cmd =\n+    if Sys.os_type <> \"Win32\" then\n+      false\n+    else if is_simple_command cmd then\n+      true\n+    else\n+      OASISString.exists OASISString.is_whitespace cmd &&\n+        starts_with_absolute_path cmd &&\n+        exe_file_exists cmd\n+\n+\n+  let run_bash ~ctxt ?f_exit_code ?(quote=true) cmd args =\n+    let fn = Filename.temp_file \"oasis-\" \".sh\" in\n+    let fn_deleted = ref false in\n+      try\n+        begin\n+          let ch = open_out_bin fn in\n+          let ch_closed = ref false in\n+            try\n+              begin\n     let cmd =\n-      if quote then\n-        if Sys.os_type = \"Win32\" then\n-          if String.contains cmd ' ' then\n-            (* Double the 1st double quote... win32... sigh *)\n-            \"\\\"\"^(Filename.quote cmd)\n+                  if quote || quote_anyway cmd then\n+                    OASISHostPath.quote (OASISHostPath.of_unix cmd)\n+                  else\n+                    cmd\n+                in\n+                  output_string ch cmd;\n+                  List.iter\n+                    ( fun s -> output_char ch ' '; output_string ch s )\n+                    args ;\n+                  output_char ch '\\n';\n+                  ch_closed:=true ;\n+                  close_out ch;\n+                  let bash = !OASISHostPath.bash_cmd () in\n+                  let add_quotes = ref false in\n+                  let shell_cmd =\n+                    if Sys.os_type <> \"Win32\" then\n+                      Filename.quote bash\n+                    else\n+                      if win_quote_needed bash = false then\n+                        bash\n+                      else\n+                        begin\n+                          add_quotes := true;\n+                          Filename.quote bash\n+                        end\n+                  in\n+                  let cmdline_orig = String.concat \" \" (cmd :: args) in\n+                  let cmdline =\n+                    let s = shell_cmd ^ \" \" ^ (Filename.quote fn) in\n+                      if !add_quotes then\n+                        \"\\\"\" ^ s ^ \"\\\"\"\n           else\n+                        s\n+                  in\n+                    info ~ctxt (f_ \"Running command '%s'\") cmdline_orig;\n+                    let ret = Sys.command cmdline in\n+                      fn_deleted := true;\n+                      Sys.remove fn;\n+                      match f_exit_code, ret with\n+                        | None, 0 -> ()\n+                        | None, i ->\n+                            failwithf\n+                              (f_ \"Command '%s' terminated with error code %d\")\n+                              cmdline_orig i\n+                        | Some f, i ->\n+                            f i\n+              end\n+            with\n+              | x when !ch_closed = false ->\n+                  close_out_noerr ch;\n+                  raise x\n+        end\n+      with\n+        | x when !fn_deleted = false ->\n+            (try Sys.remove fn with _ -> () ) ;\n+            raise x\n+\n+  let run_default ~ctxt ?f_exit_code ?(quote=true) cmd args =\n+    let add_quotes = ref false in\n+    let cmd =\n+      if quote || quote_anyway cmd then\n+        if Sys.os_type = \"Win32\" then\n+          begin\n+            if win_quote_needed cmd = false then\n             cmd\n         else\n+              begin\n+                add_quotes := true;\n+                Filename.quote cmd\n+              end\n+          end\n+        else\n           Filename.quote cmd\n       else\n         cmd\n     in\n     let cmdline =\n-      String.concat \" \" (cmd :: args)\n+      let s = String.concat \" \" (cmd :: args) in\n+        match !add_quotes with\n+          | true -> \"\\\"\" ^ s ^ \"\\\"\"\n+          | false -> s\n     in\n     info ~ctxt (f_ \"Running command '%s'\") cmdline;\n     match f_exit_code, Sys.command cmdline with\n@@ -2922,6 +3210,13 @@\n       | Some f, i ->\n         f i\n \n+  let run ~ctxt ?f_exit_code ?quote cmd args =\n+    if OASISHostPath.use_bash () &&\n+       (Sys.os_type <> \"Win32\" || not (Filename.check_suffix cmd \".bat\"))\n+    then\n+      run_bash ~ctxt ?f_exit_code ?quote cmd args\n+    else\n+      run_default ~ctxt ?f_exit_code ?quote cmd args\n \n   let run_read_output ~ctxt ?f_exit_code cmd args =\n     let fn =\n@@ -3032,7 +3327,7 @@\n     ) alternatives\n \n \n-  let which ~ctxt prg =\n+  let which ?(plain=false) ?ctxt prg =\n     let path_sep =\n       match Sys.os_type with\n         | \"Win32\" ->\n@@ -3044,11 +3339,19 @@\n     let exec_ext =\n       match Sys.os_type with\n         | \"Win32\" ->\n-          \"\" :: (OASISString.nsplit (Sys.getenv \"PATHEXT\") path_sep)\n+          \"\" :: (List.map\n+                   OASISString.lowercase_ascii\n+                   (OASISString.nsplit (Sys.getenv \"PATHEXT\") path_sep))\n         | _ ->\n           [\"\"]\n     in\n+    let p =\n     find_file ~case_sensitive:false [path_lst; [prg]] exec_ext\n+    in\n+    if plain then\n+      p\n+    else\n+      OASISHostPath.of_unix p\n \n \n   (**/**)\n@@ -3065,35 +3368,54 @@\n       dn\n \n \n-  let q = Filename.quote\n+  let q s = OASISHostPath.quote (OASISHostPath.of_unix s)\n   (**/**)\n \n-\n   let cp ~ctxt ?(recurse=false) src tgt =\n     if recurse then\n-      match Sys.os_type with\n-        | \"Win32\" ->\n-          OASISExec.run ~ctxt\n-            \"xcopy\" [q src; q tgt; \"/E\"]\n-        | _ ->\n-          OASISExec.run ~ctxt\n-            \"cp\" [\"-r\"; q src; q tgt]\n+      (*\n+        'xcopy /E' and 'cp -r' don't have the same semantic!\n+        -dir2 does exist:\n+          xcopy dir dir2 /E -> copys content of dir into dir2 (dir2/dir doesn't exist!)\n+          cp -r dir dir2    -> copys dir to dir2 (dir2/dir does exist!)\n+        -dir2 doesn't exist:\n+          xcopy dir dir2 /E -> request on command line, if dir2 is an directory or file.\n+          cp -r dir dir2    -> dir and dir2 have the same content (dir2/dir doesn't exist)\n+        Probably, there are even more differences,....\n+      *)\n+      if Sys.os_type = \"Win32\" && OASISHostPath.use_bash () = false then\n+        let tgt_real =\n+          if Sys.file_exists tgt = false then\n+            begin\n+              OASISExec.run ~ctxt \"md\" [q tgt];\n+              tgt\n+            end\n     else\n-      OASISExec.run ~ctxt\n-        (match Sys.os_type with\n-          | \"Win32\" -> \"copy\"\n-          | _ -> \"cp\")\n-        [q src; q tgt]\n-\n+            let base = Filename.basename src in\n+            if base = \".\" then\n+              tgt\n+            else\n+              let tgt_real = Filename.concat tgt base in\n+              if Sys.file_exists tgt_real = false then\n+                OASISExec.run ~ctxt \"md\" [q tgt_real];\n+              tgt_real\n+        in\n+        OASISExec.run ~ctxt \"xcopy\" [q src; q tgt_real; \"/E\" ; \"/Q\" ; \"/Y\"]\n+      else\n+        OASISExec.run ~ctxt \"cp\" [\"-r\"; q src; q tgt]\n+    else if Sys.os_type = \"Win32\" && OASISHostPath.use_bash () = false then\n+      OASISExec.run ~ctxt \"copy\" [q src; q tgt ; \"/Y\"]\n+    else\n+      OASISExec.run ~ctxt \"cp\" [q src; q tgt]\n \n   let mkdir ~ctxt tgt =\n     OASISExec.run ~ctxt\n-      (match Sys.os_type with\n-        | \"Win32\" -> \"md\"\n-        | _ -> \"mkdir\")\n+      ( if Sys.os_type = \"Win32\" && not (OASISHostPath.use_bash ()) then\n+          \"md\"\n+        else\n+          \"mkdir\" )\n       [q tgt]\n \n-\n   let rec mkdir_parent ~ctxt f tgt =\n     let tgt =\n       fix_dir tgt\n@@ -3119,10 +3441,9 @@\n \n   let rmdir ~ctxt tgt =\n     if Sys.readdir tgt = [||] then begin\n-      match Sys.os_type with\n-        | \"Win32\" ->\n+      if Sys.os_type = \"Win32\" && OASISHostPath.use_bash () = false then\n           OASISExec.run ~ctxt \"rd\" [q tgt]\n-        | _ ->\n+      else\n           OASISExec.run ~ctxt \"rm\" [\"-r\"; q tgt]\n     end else begin\n       OASISMessage.error ~ctxt\n@@ -3176,7 +3497,7 @@\n end\n \n \n-# 3159 \"setup.ml\"\n+# 3480 \"setup.ml\"\n module BaseEnvLight = struct\n # 22 \"src/base/BaseEnvLight.ml\"\n \n@@ -3256,7 +3577,7 @@\n end\n \n \n-# 3239 \"setup.ml\"\n+# 3560 \"setup.ml\"\n module BaseContext = struct\n # 22 \"src/base/BaseContext.ml\"\n \n@@ -3347,7 +3668,7 @@\n   let var_lxr = Genlex.make_lexer []\n \n \n-  let rec var_expand str =\n+  let rec var_expand ?(quoted=false) str =\n     let buff =\n       Buffer.create ((String.length str) * 2)\n     in\n@@ -3375,7 +3696,11 @@\n              | [Genlex.Ident \"ocaml_escaped\"; Genlex.String s] ->\n                String.escaped s\n              | [Genlex.Ident nm] ->\n-               var_get nm\n+                 let s = var_get nm in\n+                 if quoted then\n+                   OASISHostPath.quote s\n+                 else\n+                   s\n              | _ ->\n                failwithf\n                  (f_ \"Unknown expression '%s' in variable expansion of %s.\")\n@@ -3913,9 +4238,11 @@\n     in\n     let findlib_dir pkg =\n       let dir =\n+        OASISHostPath.of_unix (\n+          OASISHostPath.ocamlfind_unquote (\n         OASISExec.run_read_one_line ~ctxt:!BaseContext.default\n           (ocamlfind ())\n-          [\"query\"; \"-format\"; \"%d\"; pkg]\n+              [\"query\"; \"-format\"; \"%d\"; pkg] ) )\n       in\n       if Sys.file_exists dir && Sys.is_directory dir then\n         dir\n@@ -4045,6 +4372,9 @@\n       match nm with\n         | \"ocaml_version\" ->\n           \"version\", chop_version_suffix\n+        | \"standard_library\"\n+        | \"standard_library_default\" ->\n+            nm, ( fun x -> OASISHostPath.of_unix x)\n         | _ -> nm, (fun x -> x)\n     in\n     var_redefine\n@@ -4184,15 +4514,43 @@\n \n \n   let (/) a b =\n-    if os_type () = Sys.os_type then\n+    let os = os_type () in\n+    if os = Sys.os_type then\n+      if Sys.os_type = \"Win32\" && OASISHostPath.use_bash () then\n+        OASISUnixPath.concat a b\n+      else\n       Filename.concat a b\n-    else if os_type () = \"Unix\" || os_type () = \"Cygwin\" then\n+    else if os = \"Unix\" || os = \"Cygwin\" then\n       OASISUnixPath.concat a b\n     else\n-      OASISUtils.failwithf (f_ \"Cannot handle os_type %s filename concat\")\n-        (os_type ())\n+      OASISUtils.failwithf (f_ \"Cannot handle os_type %s filename concat\") os\n   (**/**)\n \n+  let auto_bash =\n+    lazy (\n+      try\n+        let bash = OASISFileUtil.which ~plain:true \"bash\" in\n+        let sh = Filename.concat (Filename.dirname bash) \"sh.exe\" in\n+        if Sys.file_exists sh then\n+          sh\n+        else\n+          bash\n+      with\n+      | Not_found | Sys_error _ -> \"\" )\n+\n+  let auto_bash () =\n+    if Sys.os_type <> \"Win32\" then\n+      \"\"\n+    else\n+      Lazy.force auto_bash\n+\n+  let bash_cmd =\n+    var_define\n+     ~short_desc:(fun () -> s_ \"Enforced bash shell:\")\n+      ~cli:CLIAuto\n+      ~arg_help:\"program\"\n+      \"use_bash\"\n+      auto_bash\n \n   let prefix =\n     p \"prefix\"\n@@ -4200,10 +4558,30 @@\n       (fun () ->\n          match os_type () with\n            | \"Win32\" ->\n+            let getenv w =\n+              try\n+                Some(Sys.getenv w)\n+              with\n+              | Not_found -> None\n+            in\n+            let s =\n+              if Sys.word_size = 64 then\n+                getenv \"ProgramW6432\"\n+              else\n+                None\n+            in\n+            let s =\n+              if s = None then\n+                getenv \"PROGRAMFILES\"\n+              else\n+                s\n+            in\n              let program_files =\n-               Sys.getenv \"PROGRAMFILES\"\n+              match s with\n+              | None -> \"C:\\\\Program Files\"\n+              | Some x -> x\n              in\n-             program_files/(pkg_name ())\n+            OASISHostPath.of_unix (program_files/(pkg_name ()))\n            | _ ->\n              \"/usr/local\")\n \n@@ -4289,7 +4667,15 @@\n   let docdir =\n     p \"docdir\"\n       (fun () -> s_ \"Documentation root\")\n-      (fun () -> \"$datarootdir\"/\"doc\"/\"$pkg_name\")\n+      (fun () ->\n+        (* TODO: (Windows only?) \"$pkg_name\" is not always substituted\n+         * (at least if datarootdir contains spaces or other garbage)\n+         * I haven't looked up why.\n+         *)\n+        match os_type () with\n+          | \"Win32\" -> \"$datarootdir\"/\"doc\"/ ( pkg_name () )\n+          | _ -> \"$datarootdir\"/\"doc\"/\"$pkg_name\"\n+      )\n \n \n   let htmldir =\n@@ -4363,9 +4749,10 @@\n       ~short_desc:(fun () -> s_ \"Remove a file.\")\n       \"rm\"\n       (fun () ->\n-         match os_type () with\n-           | \"Win32\" -> \"del\"\n-           | _ -> \"rm -f\")\n+         if not (OASISHostPath.use_bash ()) && os_type () = \"Win32\" then\n+           \"del\"\n+         else\n+           \"rm -f\" )\n \n \n   let rmdir =\n@@ -4373,9 +4760,10 @@\n       ~short_desc:(fun () -> s_ \"Remove a directory.\")\n       \"rmdir\"\n       (fun () ->\n-         match os_type () with\n-           | \"Win32\" -> \"rd\"\n-           | _ -> \"rm -rf\")\n+         if not (OASISHostPath.use_bash ()) && os_type () = \"Win32\" then\n+           \"rd\"\n+         else\n+           \"rm -rf\")\n \n \n   let debug =\n@@ -4439,14 +4827,26 @@\n            let has_native_dynlink =\n              let ocamlfind = ocamlfind () in\n              try\n-               let fn =\n+               (* -format %d/%a doesn't work, because ocamlfind quotes %d\n+                  * and %a separatly *)\n+               let fn1 =\n+                 OASISHostPath.ocamlfind_unquote (\n+                   OASISExec.run_read_one_line\n+                     ~ctxt:!BaseContext.default\n+                     ocamlfind\n+                     [\"query\"; \"-predicates\"; \"native\"; \"dynlink\";\n+                      \"-format\"; \"%d\"] )\n+               in\n+               let fn2 =\n+                 OASISHostPath.ocamlfind_unquote (\n                  OASISExec.run_read_one_line\n                    ~ctxt:!BaseContext.default\n                    ocamlfind\n                    [\"query\"; \"-predicates\"; \"native\"; \"dynlink\";\n-                    \"-format\"; \"%d/%a\"]\n+                      \"-format\"; \"%a\"]\n+                 )\n                in\n-               Sys.file_exists fn\n+               fn1 <> \"\" && fn2 <> \"\" && Sys.file_exists (Filename.concat fn1 fn2)\n              with _ ->\n                false\n            in\n@@ -4473,6 +4873,8 @@\n     rpkg := Some pkg;\n     List.iter (fun f -> f pkg.oasis_version) !var_cond\n \n+  let () =\n+    OASISHostPath.bash_cmd := bash_cmd\n end\n \n module BaseFileAB = struct\n@@ -4748,6 +5150,7 @@\n         ~source_file_exists:(fun fn ->\n           OASISFileUtil.file_exists_case (OASISHostPath.of_unix fn))\n         ~is_native:(bool_of_string (is_native ()))\n+        ~ext_obj:(ext_obj())\n         (cs, bs, obj)\n     in\n     let evs =\n@@ -4773,7 +5176,7 @@\n     OASISExec.run ~ctxt:!BaseContext.default ~quote:false\n       (var_expand cmd)\n       (List.map\n-         var_expand\n+         (var_expand ~quoted:true)\n          (args @ (Array.to_list extra_args)))\n \n \n@@ -5047,9 +5450,27 @@\n \n   let configure ~ctxt t args =\n     (* Run configure *)\n+\n+    (* use-bash is an exception. It's already needed to run the\n+       pre-configure script. *)\n+    let rec f = function\n+      | [] ->\n+        begin\n+          try\n+            let x = Sys.getenv \"USE_BASH\" in\n+              OASISHostPath.bash_cmd := (fun () -> x);\n+          with\n+            _ -> ()\n+        end\n+      | \"--use-bash\"::x::_ ->\n+          OASISHostPath.bash_cmd := (fun () -> x);\n+      | _::tl -> f tl\n+    in\n+      f (Array.to_list args);\n     BaseCustom.hook\n       t.package.conf_custom\n       (fun () ->\n+           OASISHostPath.bash_cmd := BaseStandardVar.bash_cmd;\n          (* Reload if preconf has changed it *)\n          begin\n            try\n@@ -5679,7 +6100,7 @@\n end\n \n \n-# 5662 \"setup.ml\"\n+# 6083 \"setup.ml\"\n module InternalConfigurePlugin = struct\n # 22 \"src/plugins/internal/InternalConfigurePlugin.ml\"\n \n@@ -5959,12 +6380,21 @@\n   let install_findlib_ev = \"install-findlib\"\n \n \n-  (* TODO: this can be more generic and used elsewhere. *)\n-  let win32_max_command_line_length = 8000\n-\n-\n   let split_install_command ocamlfind findlib_name meta files =\n-    if Sys.os_type = \"Win32\" then\n+    if Sys.os_type <> \"Win32\" then\n+      [\"install\" :: findlib_name :: meta :: files]\n+    else\n+      let f s =\n+        OASISHostPath.quote ( OASISHostPath.of_unix s )\n+      in\n+      let files = List.map f files in\n+      let meta = f meta  in\n+      let win32_max_command_line_length =\n+        if OASISHostPath.use_bash () = false then\n+          7900\n+        else\n+          30000\n+      in\n       (* Arguments for the first command: *)\n       let first_args = [\"install\"; findlib_name; meta] in\n       (* Arguments for remaining commands: *)\n@@ -6022,10 +6452,11 @@\n                     let cmds = split other_args others in\n                     cmd :: cmds\n       in\n+      if files = [] then\n+        [ first_args ]\n+      else\n       (* The first command does not use -add: *)\n       split first_args files\n-    else\n-      [\"install\" :: findlib_name :: meta :: files]\n \n \n   let install =\n@@ -6446,7 +6877,10 @@\n       if ev = install_file_ev then begin\n         if OASISFileUtil.file_exists_case data then begin\n           info (f_ \"Removing file '%s'\") data;\n-          Sys.remove data\n+          (try Sys.remove data\n+          with Sys_error _ when\n+              Sys.os_type = \"Win32\" &&\n+              Filename.basename data = \"setup.ml\" -> ());\n         end else begin\n           warning (f_ \"File '%s' doesn't exist anymore\") data\n         end\n@@ -6482,7 +6916,7 @@\n end\n \n \n-# 6465 \"setup.ml\"\n+# 6899 \"setup.ml\"\n module OCamlbuildCommon = struct\n # 22 \"src/plugins/ocamlbuild/OCamlbuildCommon.ml\"\n \n@@ -6497,11 +6931,7 @@\n   open OASISTypes\n \n \n-  type args =\n-    {\n-      plugin_tags: string option;\n-      extra: string list;\n-    }\n+  type extra_args = string list\n \n \n   let ocamlbuild_clean_ev = \"ocamlbuild-clean\"\n@@ -6543,14 +6973,7 @@\n           ]\n         else\n           [];\n-\n-        args.extra;\n-\n-        begin\n-          match args.plugin_tags with\n-          | Some t -> [\"-plugin-tag\"; Filename.quote t]\n-          | None -> []\n-        end;\n+        args;\n \n         if bool_of_string (debug ()) then\n           [\"-tag\"; \"debug\"]\n@@ -6581,9 +7004,7 @@\n     (* Run if never called with these args *)\n     if not (BaseLog.exists ~ctxt ocamlbuild_clean_ev extra_cli) then\n       begin\n-        OASISExec.run\n-          ~ctxt (ocamlbuild ())\n-          (fix_args {extra = [\"-clean\"]; plugin_tags = None} extra_argv);\n+        OASISExec.run ~ctxt (ocamlbuild ()) (fix_args [\"-clean\"] extra_argv);\n         BaseLog.register ~ctxt ocamlbuild_clean_ev extra_cli;\n         at_exit\n           (fun () ->\n@@ -6615,7 +7036,7 @@\n         | [] ->\n           dir\n     in\n-    search_args \"_build\" (fix_args {extra = []; plugin_tags = None} extra_argv)\n+    search_args \"_build\" (fix_args [] extra_argv)\n \n \n end\n@@ -6641,7 +7062,7 @@\n   let cond_targets_hook = ref (fun lst -> lst)\n \n \n-  let build ~ctxt args pkg argv =\n+  let build ~ctxt extra_args pkg argv =\n     (* Return the filename in build directory *)\n     let in_build_dir fn =\n       Filename.concat\n@@ -6789,14 +7210,14 @@\n     (* Run a list of target... *)\n     run_ocamlbuild\n       ~ctxt\n-      {args with extra = List.flatten (List.map snd cond_targets) @ args.extra}\n+      (List.flatten (List.map snd cond_targets) @ extra_args)\n       argv;\n     (* ... and register events *)\n     List.iter check_and_register (List.flatten (List.map fst cond_targets))\n \n \n-  let clean ~ctxt pkg args  =\n-    run_clean ~ctxt args;\n+  let clean ~ctxt pkg extra_args  =\n+    run_clean ~ctxt extra_args;\n     List.iter\n       (function\n          | Library (cs, _, _) ->\n@@ -6827,7 +7248,7 @@\n \n   type run_t =\n     {\n-      args: args;\n+      extra_args: string list;\n       run_path: unix_filename;\n     }\n \n@@ -6849,8 +7270,7 @@\n           cs.cs_name^\".docdir\";\n         ]\n     in\n-    run_ocamlbuild ~ctxt\n-      {run.args with extra = index_html :: run.args.extra} argv;\n+    run_ocamlbuild ~ctxt (index_html :: run.extra_args) argv;\n     List.iter\n       (fun glb ->\n          match OASISFileUtil.glob ~ctxt (Filename.concat tgt_dir glb) with\n@@ -6868,7 +7288,7 @@\n end\n \n \n-# 6851 \"setup.ml\"\n+# 7271 \"setup.ml\"\n module CustomPlugin = struct\n # 22 \"src/plugins/custom/CustomPlugin.ml\"\n \n@@ -7000,15 +7420,13 @@\n end\n \n \n-# 6983 \"setup.ml\"\n+# 7403 \"setup.ml\"\n open OASISTypes;;\n \n let setup_t =\n   {\n      BaseSetup.configure = InternalConfigurePlugin.configure;\n-     build =\n-       OCamlbuildPlugin.build\n-         {OCamlbuildCommon.plugin_tags = None; extra = [\"-use-ocamlfind\"]};\n+     build = OCamlbuildPlugin.build [\"-use-ocamlfind\"];\n      test =\n        [\n           (\"devel\",\n@@ -7126,11 +7544,7 @@\n           (\"api-oasis\",\n             OCamlbuildDocPlugin.doc_build\n               {\n-                 OCamlbuildDocPlugin.args =\n-                   {\n-                      OCamlbuildCommon.plugin_tags = None;\n-                      extra = [\"-use-ocamlfind\"]\n-                   };\n+                 OCamlbuildDocPlugin.extra_args = [\"-use-ocamlfind\"];\n                  run_path = \"src/\"\n               })\n        ];\n@@ -7254,11 +7668,7 @@\n           (\"api-oasis\",\n             OCamlbuildDocPlugin.doc_clean\n               {\n-                 OCamlbuildDocPlugin.args =\n-                   {\n-                      OCamlbuildCommon.plugin_tags = None;\n-                      extra = [\"-use-ocamlfind\"]\n-                   };\n+                 OCamlbuildDocPlugin.extra_args = [\"-use-ocamlfind\"];\n                  run_path = \"src/\"\n               })\n        ];\n@@ -11805,9 +12215,9 @@\n           schema_data = PropList.Data.create ();\n           plugin_data = []\n        };\n-     oasis_fn = None;\n-     oasis_version = \"0.4.11~HEAD\";\n-     oasis_digest = None;\n+     oasis_fn = Some \"_oasis\";\n+     oasis_version = \"0.4.10\";\n+     oasis_digest = Some \"M\\233\\243N\\025\\208\\179b\\202K\\232\\t\\132~\\222\\226\";\n      oasis_exec = None;\n      oasis_setup_args = [];\n      setup_update = false\n@@ -11815,7 +12225,7 @@\n \n let setup () = BaseSetup.setup setup_t;;\n \n-# 11799 \"setup.ml\"\n+# 12209 \"setup.ml\"\n let setup_t = BaseCompat.Compat_0_4.adapt_setup_t setup_t\n open BaseCompat.Compat_0_4\n (* OASIS_STOP *)\n--- ./src/base/BaseBuilt.ml\n+++ ./src/base/BaseBuilt.ml\n@@ -165,6 +165,7 @@\n       ~source_file_exists:(fun fn ->\n         OASISFileUtil.file_exists_case (OASISHostPath.of_unix fn))\n       ~is_native:(bool_of_string (is_native ()))\n+      ~ext_obj:(ext_obj())\n       (cs, bs, obj)\n   in\n   let evs =\n--- ./src/base/BaseCheck.ml\n+++ ./src/base/BaseCheck.ml\n@@ -118,9 +118,11 @@\n   in\n   let findlib_dir pkg =\n     let dir =\n+      OASISHostPath.of_unix (\n+        OASISHostPath.ocamlfind_unquote (\n       OASISExec.run_read_one_line ~ctxt:!BaseContext.default\n         (ocamlfind ())\n-        [\"query\"; \"-format\"; \"%d\"; pkg]\n+            [\"query\"; \"-format\"; \"%d\"; pkg] ) )\n     in\n     if Sys.file_exists dir && Sys.is_directory dir then\n       dir\n--- ./src/base/BaseCustom.ml\n+++ ./src/base/BaseCustom.ml\n@@ -31,7 +31,7 @@\n   OASISExec.run ~ctxt:!BaseContext.default ~quote:false\n     (var_expand cmd)\n     (List.map\n-       var_expand\n+       (var_expand ~quoted:true)\n        (args @ (Array.to_list extra_args)))\n \n \n--- ./src/base/BaseEnv.ml\n+++ ./src/base/BaseEnv.ml\n@@ -69,7 +69,7 @@\n let var_lxr = Genlex.make_lexer []\n \n \n-let rec var_expand str =\n+let rec var_expand ?(quoted=false) str =\n   let buff =\n     Buffer.create ((String.length str) * 2)\n   in\n@@ -97,7 +97,11 @@\n            | [Genlex.Ident \"ocaml_escaped\"; Genlex.String s] ->\n              String.escaped s\n            | [Genlex.Ident nm] ->\n-             var_get nm\n+               let s = var_get nm in\n+               if quoted then\n+                 OASISHostPath.quote s\n+               else\n+                 s\n            | _ ->\n              failwithf\n                (f_ \"Unknown expression '%s' in variable expansion of %s.\")\n--- ./src/base/BaseEnv.mli\n+++ ./src/base/BaseEnv.mli\n@@ -73,8 +73,9 @@\n \n (** Expand variable that can be found in string. Variable follow definition of\n     variable for [Buffer.add_substitute].\n+    quoted is false by default\n *)\n-val var_expand: string -> string\n+val var_expand: ?quoted:bool -> string -> string\n \n \n (** Get variable. *)\n--- ./src/base/BaseOCamlcConfig.ml\n+++ ./src/base/BaseOCamlcConfig.ml\n@@ -116,6 +116,9 @@\n     match nm with\n       | \"ocaml_version\" ->\n         \"version\", chop_version_suffix\n+      | \"standard_library\"\n+      | \"standard_library_default\" ->\n+          nm, ( fun x -> OASISHostPath.of_unix x)\n       | _ -> nm, (fun x -> x)\n   in\n   var_redefine\n--- ./src/base/BaseSetup.ml\n+++ ./src/base/BaseSetup.ml\n@@ -93,9 +93,27 @@\n \n let configure ~ctxt t args =\n   (* Run configure *)\n+\n+  (* use-bash is an exception. It's already needed to run the\n+     pre-configure script. *)\n+  let rec f = function\n+    | [] ->\n+      begin\n+        try\n+          let x = Sys.getenv \"USE_BASH\" in\n+            OASISHostPath.bash_cmd := (fun () -> x);\n+        with\n+          _ -> ()\n+      end\n+    | \"--use-bash\"::x::_ ->\n+        OASISHostPath.bash_cmd := (fun () -> x);\n+    | _::tl -> f tl\n+  in\n+    f (Array.to_list args);\n   BaseCustom.hook\n     t.package.conf_custom\n     (fun () ->\n+         OASISHostPath.bash_cmd := BaseStandardVar.bash_cmd;\n        (* Reload if preconf has changed it *)\n        begin\n          try\n--- ./src/base/BaseStandardVar.ml\n+++ ./src/base/BaseStandardVar.ml\n@@ -135,15 +135,43 @@\n \n \n let (/) a b =\n-  if os_type () = Sys.os_type then\n+  let os = os_type () in\n+  if os = Sys.os_type then\n+    if Sys.os_type = \"Win32\" && OASISHostPath.use_bash () then\n+      OASISUnixPath.concat a b\n+    else\n     Filename.concat a b\n-  else if os_type () = \"Unix\" || os_type () = \"Cygwin\" then\n+  else if os = \"Unix\" || os = \"Cygwin\" then\n     OASISUnixPath.concat a b\n   else\n-    OASISUtils.failwithf (f_ \"Cannot handle os_type %s filename concat\")\n-      (os_type ())\n+    OASISUtils.failwithf (f_ \"Cannot handle os_type %s filename concat\") os\n (**/**)\n \n+let auto_bash =\n+  lazy (\n+    try\n+      let bash = OASISFileUtil.which ~plain:true \"bash\" in\n+      let sh = Filename.concat (Filename.dirname bash) \"sh.exe\" in\n+      if Sys.file_exists sh then\n+        sh\n+      else\n+        bash\n+    with\n+    | Not_found | Sys_error _ -> \"\" )\n+\n+let auto_bash () =\n+  if Sys.os_type <> \"Win32\" then\n+    \"\"\n+  else\n+    Lazy.force auto_bash\n+\n+let bash_cmd =\n+  var_define\n+   ~short_desc:(fun () -> s_ \"Enforced bash shell:\")\n+    ~cli:CLIAuto\n+    ~arg_help:\"program\"\n+    \"use_bash\"\n+    auto_bash\n \n let prefix =\n   p \"prefix\"\n@@ -151,10 +179,30 @@\n     (fun () ->\n        match os_type () with\n          | \"Win32\" ->\n+          let getenv w =\n+            try\n+              Some(Sys.getenv w)\n+            with\n+            | Not_found -> None\n+          in\n+          let s =\n+            if Sys.word_size = 64 then\n+              getenv \"ProgramW6432\"\n+            else\n+              None\n+          in\n+          let s =\n+            if s = None then\n+              getenv \"PROGRAMFILES\"\n+            else\n+              s\n+          in\n            let program_files =\n-             Sys.getenv \"PROGRAMFILES\"\n+            match s with\n+            | None -> \"C:\\\\Program Files\"\n+            | Some x -> x\n            in\n-           program_files/(pkg_name ())\n+          OASISHostPath.of_unix (program_files/(pkg_name ()))\n          | _ ->\n            \"/usr/local\")\n \n@@ -240,7 +288,15 @@\n let docdir =\n   p \"docdir\"\n     (fun () -> s_ \"Documentation root\")\n-    (fun () -> \"$datarootdir\"/\"doc\"/\"$pkg_name\")\n+    (fun () ->\n+      (* TODO: (Windows only?) \"$pkg_name\" is not always substituted\n+       * (at least if datarootdir contains spaces or other garbage)\n+       * I haven't looked up why.\n+       *)\n+      match os_type () with\n+        | \"Win32\" -> \"$datarootdir\"/\"doc\"/ ( pkg_name () )\n+        | _ -> \"$datarootdir\"/\"doc\"/\"$pkg_name\"\n+    )\n \n \n let htmldir =\n@@ -314,9 +370,10 @@\n     ~short_desc:(fun () -> s_ \"Remove a file.\")\n     \"rm\"\n     (fun () ->\n-       match os_type () with\n-         | \"Win32\" -> \"del\"\n-         | _ -> \"rm -f\")\n+       if not (OASISHostPath.use_bash ()) && os_type () = \"Win32\" then\n+         \"del\"\n+       else\n+         \"rm -f\" )\n \n \n let rmdir =\n@@ -324,9 +381,10 @@\n     ~short_desc:(fun () -> s_ \"Remove a directory.\")\n     \"rmdir\"\n     (fun () ->\n-       match os_type () with\n-         | \"Win32\" -> \"rd\"\n-         | _ -> \"rm -rf\")\n+       if not (OASISHostPath.use_bash ()) && os_type () = \"Win32\" then\n+         \"rd\"\n+       else\n+         \"rm -rf\")\n \n \n let debug =\n@@ -390,14 +448,26 @@\n          let has_native_dynlink =\n            let ocamlfind = ocamlfind () in\n            try\n-             let fn =\n+             (* -format %d/%a doesn't work, because ocamlfind quotes %d\n+                * and %a separatly *)\n+             let fn1 =\n+               OASISHostPath.ocamlfind_unquote (\n+                 OASISExec.run_read_one_line\n+                   ~ctxt:!BaseContext.default\n+                   ocamlfind\n+                   [\"query\"; \"-predicates\"; \"native\"; \"dynlink\";\n+                    \"-format\"; \"%d\"] )\n+             in\n+             let fn2 =\n+               OASISHostPath.ocamlfind_unquote (\n                OASISExec.run_read_one_line\n                  ~ctxt:!BaseContext.default\n                  ocamlfind\n                  [\"query\"; \"-predicates\"; \"native\"; \"dynlink\";\n-                  \"-format\"; \"%d/%a\"]\n+                    \"-format\"; \"%a\"]\n+               )\n              in\n-             Sys.file_exists fn\n+             fn1 <> \"\" && fn2 <> \"\" && Sys.file_exists (Filename.concat fn1 fn2)\n            with _ ->\n              false\n          in\n@@ -424,3 +494,5 @@\n   rpkg := Some pkg;\n   List.iter (fun f -> f pkg.oasis_version) !var_cond\n \n+let () =\n+  OASISHostPath.bash_cmd := bash_cmd\n--- ./src/base/BaseStandardVar.mli\n+++ ./src/base/BaseStandardVar.mli\n@@ -73,6 +73,9 @@\n val systhread_supported:      unit -> string\n \n \n+\n+val bash_cmd:                 unit -> string\n+\n (** {2 Paths}\n \n     See {{:http://www.gnu.org/prep/standards/html_node/Directory-Variables.html} GNU standards}.\n--- ./src/dynrun/OASISDynRun.ml\n+++ ./src/dynrun/OASISDynRun.ml\n@@ -56,7 +56,12 @@\n \n   let setup ~ctxt setup_t =\n     let tmp_setup_fn =\n-      Filename.temp_file (setup_t.package.name^\"-setup\") \".ml\" in\n+      if Sys.os_type <> \"Win32\" then\n+        Filename.temp_file (setup_t.package.name^\"-setup\") \".ml\"\n+      else\n+        (* dirty hack, because otherwise to_unix will fail *)\n+        Filename.temp_file ~temp_dir:\".\" (\"tmp-\"^setup_t.package.name^\"-setup\") \".ml\"\n+    in\n     let restored = ref false in\n     let cleanup ~ctxt () =\n       if not !restored then begin\n--- ./src/oasis/OASISCustom.ml\n+++ ./src/oasis/OASISCustom.ml\n@@ -38,14 +38,14 @@\n   let pre_command =\n     new_field_conditional schm (\"Pre\"^nm^\"Command\")\n       ~default:None\n-      (opt command_line)\n+      (opt command_line_warn)\n       hlp_pre\n       (fun pkg -> (sync pkg).pre_command)\n   in\n   let post_command =\n     new_field_conditional schm (\"Post\"^nm^\"Command\")\n       ~default:None\n-      (opt command_line)\n+      (opt command_line_warn)\n       hlp_post\n       (fun pkg -> (sync pkg).post_command)\n   in\n--- ./src/oasis/OASISExec.ml\n+++ ./src/oasis/OASISExec.ml\n@@ -25,26 +25,170 @@\n open OASISUtils\n open OASISMessage\n \n+let is_dubious_char = function\n+  | '+' | '~' | ':' | '.' | '-' | '_' | '/' | '\\\\' -> false\n+  | c ->\n+    OASISString.is_digit c = false &&\n+    OASISString.is_alpha c = false\n \n-(* TODO: I don't like this quote, it is there because $(rm) foo expands to\n- * 'rm -f' foo...\n-*)\n-let run ~ctxt ?f_exit_code ?(quote=true) cmd args =\n+\n+let win_quote_needed str =\n+  let f = function\n+    | 'a' .. 'z'  | 'A' .. 'Z' | '0' .. '9'\n+    | '_' | '-' | '~' | '.' | ':' | ',' | '\\\\' -> false\n+    | _ -> true\n+  in\n+    str = \"\" || OASISString.exists f str\n+\n+let is_simple_command str =\n+  String.length str > 0 &&\n+  not (OASISString.exists is_dubious_char str)\n+\n+let is_path_sep = function\n+  | '/' | '\\\\' -> true\n+  | _ -> false\n+\n+let starts_with_absolute_path cmd =\n+  let len = String.length cmd in\n+    if len < 3 then\n+      false\n+    else\n+      let c0 = cmd.[0] in\n+      let c1 = cmd.[1] in\n+        if is_path_sep c0 && is_path_sep c1 then (* network devices: \"//\" *)\n+          true\n+        else if len = 3 then\n+          false\n+        else  (* C:\\.... *)\n+          OASISString.is_alpha c0 && c1 = ':' && is_path_sep cmd.[2]\n+\n+let exe_exts = lazy\n+  begin\n+    let exts =\n+      try\n+        OASISString.nsplit\n+          (Sys.getenv \"PATHEXT\")\n+          ';'\n+      with\n+        | Not_found -> []\n+    in\n+    let exts' =\n+      List.filter\n+        ( fun a -> a <> \"\" && a.[0] = '.' && a <> \".exe\" )\n+        (List.map OASISString.lowercase_ascii exts)\n+    in\n+      \".exe\"::exts'\n+  end\n+\n+let exe_file_exists fln =\n+  Sys.file_exists fln ||\n+  List.exists\n+    (fun a -> Sys.file_exists ( fln ^ a ) )\n+    (Lazy.force exe_exts)\n+\n+\n+let quote_anyway cmd =\n+  if Sys.os_type <> \"Win32\" then\n+    false\n+  else if is_simple_command cmd then\n+    true\n+  else\n+    OASISString.exists OASISString.is_whitespace cmd &&\n+      starts_with_absolute_path cmd &&\n+      exe_file_exists cmd\n+\n+\n+let run_bash ~ctxt ?f_exit_code ?(quote=true) cmd args =\n+  let fn = Filename.temp_file \"oasis-\" \".sh\" in\n+  let fn_deleted = ref false in\n+    try\n+      begin\n+        let ch = open_out_bin fn in\n+        let ch_closed = ref false in\n+          try\n+            begin\n   let cmd =\n-    if quote then\n-      if Sys.os_type = \"Win32\" then\n-        if String.contains cmd ' ' then\n-          (* Double the 1st double quote... win32... sigh *)\n-          \"\\\"\"^(Filename.quote cmd)\n+                if quote || quote_anyway cmd then\n+                  OASISHostPath.quote (OASISHostPath.of_unix cmd)\n+                else\n+                  cmd\n+              in\n+                output_string ch cmd;\n+                List.iter\n+                  ( fun s -> output_char ch ' '; output_string ch s )\n+                  args ;\n+                output_char ch '\\n';\n+                ch_closed:=true ;\n+                close_out ch;\n+                let bash = !OASISHostPath.bash_cmd () in\n+                let add_quotes = ref false in\n+                let shell_cmd =\n+                  if Sys.os_type <> \"Win32\" then\n+                    Filename.quote bash\n+                  else\n+                    if win_quote_needed bash = false then\n+                      bash\n+                    else\n+                      begin\n+                        add_quotes := true;\n+                        Filename.quote bash\n+                      end\n+                in\n+                let cmdline_orig = String.concat \" \" (cmd :: args) in\n+                let cmdline =\n+                  let s = shell_cmd ^ \" \" ^ (Filename.quote fn) in\n+                    if !add_quotes then\n+                      \"\\\"\" ^ s ^ \"\\\"\"\n         else\n+                      s\n+                in\n+                  info ~ctxt (f_ \"Running command '%s'\") cmdline_orig;\n+                  let ret = Sys.command cmdline in\n+                    fn_deleted := true;\n+                    Sys.remove fn;\n+                    match f_exit_code, ret with\n+                      | None, 0 -> ()\n+                      | None, i ->\n+                          failwithf\n+                            (f_ \"Command '%s' terminated with error code %d\")\n+                            cmdline_orig i\n+                      | Some f, i ->\n+                          f i\n+            end\n+          with\n+            | x when !ch_closed = false ->\n+                close_out_noerr ch;\n+                raise x\n+      end\n+    with\n+      | x when !fn_deleted = false ->\n+          (try Sys.remove fn with _ -> () ) ;\n+          raise x\n+\n+let run_default ~ctxt ?f_exit_code ?(quote=true) cmd args =\n+  let add_quotes = ref false in\n+  let cmd =\n+    if quote || quote_anyway cmd then\n+      if Sys.os_type = \"Win32\" then\n+        begin\n+          if win_quote_needed cmd = false then\n           cmd\n       else\n+            begin\n+              add_quotes := true;\n+              Filename.quote cmd\n+            end\n+        end\n+      else\n         Filename.quote cmd\n     else\n       cmd\n   in\n   let cmdline =\n-    String.concat \" \" (cmd :: args)\n+    let s = String.concat \" \" (cmd :: args) in\n+      match !add_quotes with\n+        | true -> \"\\\"\" ^ s ^ \"\\\"\"\n+        | false -> s\n   in\n   info ~ctxt (f_ \"Running command '%s'\") cmdline;\n   match f_exit_code, Sys.command cmdline with\n@@ -56,6 +200,13 @@\n     | Some f, i ->\n       f i\n \n+let run ~ctxt ?f_exit_code ?quote cmd args =\n+  if OASISHostPath.use_bash () &&\n+     (Sys.os_type <> \"Win32\" || not (Filename.check_suffix cmd \".bat\"))\n+  then\n+    run_bash ~ctxt ?f_exit_code ?quote cmd args\n+  else\n+    run_default ~ctxt ?f_exit_code ?quote cmd args\n \n let run_read_output ~ctxt ?f_exit_code cmd args =\n   let fn =\n--- ./src/oasis/OASISFileTemplate.ml\n+++ ./src/oasis/OASISFileTemplate.ml\n@@ -496,6 +496,12 @@\n       if Sys.file_exists bak then begin\n         info ~ctxt (f_ \"Restore file '%s' with backup file '%s'.\")\n           fn bak;\n+        if Sys.os_type = \"Win32\" then (\n+          try\n+            Sys.remove fn\n+          with\n+          | Sys_error _ -> ()\n+        );\n         Sys.rename bak fn\n       end else begin\n         warning ~ctxt\n--- ./src/oasis/OASISFileUtil.ml\n+++ ./src/oasis/OASISFileUtil.ml\n@@ -84,7 +84,7 @@\n   ) alternatives\n \n \n-let which ~ctxt prg =\n+let which ?(plain=false) ?ctxt prg =\n   let path_sep =\n     match Sys.os_type with\n       | \"Win32\" ->\n@@ -96,11 +96,19 @@\n   let exec_ext =\n     match Sys.os_type with\n       | \"Win32\" ->\n-        \"\" :: (OASISString.nsplit (Sys.getenv \"PATHEXT\") path_sep)\n+        \"\" :: (List.map\n+                 OASISString.lowercase_ascii\n+                 (OASISString.nsplit (Sys.getenv \"PATHEXT\") path_sep))\n       | _ ->\n         [\"\"]\n   in\n+  let p =\n   find_file ~case_sensitive:false [path_lst; [prg]] exec_ext\n+  in\n+  if plain then\n+    p\n+  else\n+    OASISHostPath.of_unix p\n \n \n (**/**)\n@@ -117,35 +125,54 @@\n     dn\n \n \n-let q = Filename.quote\n+let q s = OASISHostPath.quote (OASISHostPath.of_unix s)\n (**/**)\n \n-\n let cp ~ctxt ?(recurse=false) src tgt =\n   if recurse then\n-    match Sys.os_type with\n-      | \"Win32\" ->\n-        OASISExec.run ~ctxt\n-          \"xcopy\" [q src; q tgt; \"/E\"]\n-      | _ ->\n-        OASISExec.run ~ctxt\n-          \"cp\" [\"-r\"; q src; q tgt]\n+    (*\n+      'xcopy /E' and 'cp -r' don't have the same semantic!\n+      -dir2 does exist:\n+        xcopy dir dir2 /E -> copys content of dir into dir2 (dir2/dir doesn't exist!)\n+        cp -r dir dir2    -> copys dir to dir2 (dir2/dir does exist!)\n+      -dir2 doesn't exist:\n+        xcopy dir dir2 /E -> request on command line, if dir2 is an directory or file.\n+        cp -r dir dir2    -> dir and dir2 have the same content (dir2/dir doesn't exist)\n+      Probably, there are even more differences,....\n+    *)\n+    if Sys.os_type = \"Win32\" && OASISHostPath.use_bash () = false then\n+      let tgt_real =\n+        if Sys.file_exists tgt = false then\n+          begin\n+            OASISExec.run ~ctxt \"md\" [q tgt];\n+            tgt\n+          end\n   else\n-    OASISExec.run ~ctxt\n-      (match Sys.os_type with\n-        | \"Win32\" -> \"copy\"\n-        | _ -> \"cp\")\n-      [q src; q tgt]\n-\n+          let base = Filename.basename src in\n+          if base = \".\" then\n+            tgt\n+          else\n+            let tgt_real = Filename.concat tgt base in\n+            if Sys.file_exists tgt_real = false then\n+              OASISExec.run ~ctxt \"md\" [q tgt_real];\n+            tgt_real\n+      in\n+      OASISExec.run ~ctxt \"xcopy\" [q src; q tgt_real; \"/E\" ; \"/Q\" ; \"/Y\"]\n+    else\n+      OASISExec.run ~ctxt \"cp\" [\"-r\"; q src; q tgt]\n+  else if Sys.os_type = \"Win32\" && OASISHostPath.use_bash () = false then\n+    OASISExec.run ~ctxt \"copy\" [q src; q tgt ; \"/Y\"]\n+  else\n+    OASISExec.run ~ctxt \"cp\" [q src; q tgt]\n \n let mkdir ~ctxt tgt =\n   OASISExec.run ~ctxt\n-    (match Sys.os_type with\n-      | \"Win32\" -> \"md\"\n-      | _ -> \"mkdir\")\n+    ( if Sys.os_type = \"Win32\" && not (OASISHostPath.use_bash ()) then\n+        \"md\"\n+      else\n+        \"mkdir\" )\n     [q tgt]\n \n-\n let rec mkdir_parent ~ctxt f tgt =\n   let tgt =\n     fix_dir tgt\n@@ -171,10 +198,9 @@\n \n let rmdir ~ctxt tgt =\n   if Sys.readdir tgt = [||] then begin\n-    match Sys.os_type with\n-      | \"Win32\" ->\n+    if Sys.os_type = \"Win32\" && OASISHostPath.use_bash () = false then\n         OASISExec.run ~ctxt \"rd\" [q tgt]\n-      | _ ->\n+    else\n         OASISExec.run ~ctxt \"rm\" [\"-r\"; q tgt]\n   end else begin\n     OASISMessage.error ~ctxt\n--- ./src/oasis/OASISFileUtil.mli\n+++ ./src/oasis/OASISFileUtil.mli\n@@ -44,8 +44,7 @@\n \n (** Find real filename of an executable.\n *)\n-val which: ctxt:OASISContext.t -> host_filename -> host_filename\n-\n+val which: ?plain:bool -> ?ctxt:OASISContext.t -> host_filename -> host_filename\n \n (** Copy a file.\n *)\n--- ./src/oasis/OASISHostPath.ml\n+++ ./src/oasis/OASISHostPath.ml\n@@ -27,6 +27,118 @@\n \n module Unix = OASISUnixPath\n \n+let bash_cmd = ref ( fun () -> \"\" )\n+\n+let use_bash () = ( !bash_cmd () ) <> \"\"\n+\n+\n+(* generic quote and unixquote are taken from ocaml source *)\n+let generic_quote quotequote s =\n+  let l = String.length s in\n+  let b = Buffer.create (l + 20) in\n+    Buffer.add_char b '\\'';\n+    for i = 0 to l - 1 do\n+      if s.[i] = '\\'' then\n+        Buffer.add_string b quotequote\n+      else\n+        Buffer.add_char b  s.[i]\n+    done;\n+    Buffer.add_char b '\\'';\n+    Buffer.contents b\n+\n+let unixquote = generic_quote \"'\\\\''\"\n+\n+let win = Sys.os_type = \"Win32\"\n+\n+let quote str =\n+  if win && use_bash () then\n+    unixquote str\n+  else\n+    quote str\n+\n+(* uniform_path (only called, if Sys.os_type = \"Win32\")\n+ * - enforces uniform path seperators\n+ * - strips trailing slashes (exceptions in case of C:\\ and / )\n+ * - removes (some) unnecessary file components like ./././\n+ *)\n+\n+let get_naccu accu str first pos =\n+  (* I assume c//d is identic to c/d\n+   * the only exception (Network devices \\\\xyz\\asdf)\n+   * is covered in uniform_path\n+   *)\n+  if first = pos then\n+    accu\n+  else\n+    let nlen = pos - first in\n+    let nstr = String.sub str first nlen in\n+      (* test/././ is the same as test *)\n+      if nlen = 1 && nstr = \".\" then\n+        accu\n+      (* a/b/../ is the same as a *)\n+      else if nlen = 2 && nstr = \"..\" then\n+        match accu with\n+          | []      -> [ nstr ]\n+          | \"..\"::_ -> nstr::accu\n+          | hd::tl  -> tl\n+      else\n+        nstr::accu\n+\n+let is_path_sep = function\n+  | '\\\\' | '/' -> true\n+  | _ -> false\n+\n+\n+let uniform_path path_sep = function\n+  | \"\" -> \"\" (* Raise an exception? Or an possible intermediate result?\n+             * Filename.basename and dirname also don't raise exceptions *)\n+  | str ->\n+      let rec iter accu str len first pos =\n+        if pos >= len then\n+          List.rev (get_naccu accu str first pos)\n+        else\n+          let next = succ pos in\n+            match is_path_sep str.[pos] with\n+              | true -> iter (get_naccu accu str first pos) str len next next\n+              | false -> iter accu str len first next\n+      in\n+        let is_unix_root = is_path_sep str.[0] in\n+        let len = String.length str in\n+        let next_sep = len > 1 && is_path_sep str.[1] in\n+        let is_network_root = is_unix_root && next_sep in\n+        let is_currel = str.[0] = '.' && ( next_sep || len = 1 ) in\n+        let l = iter [] str len 0 0 in\n+        (* Trailing slashes are normally stripped.\n+         * This is not possible in case of root folders\n+         * Sys.file_exists \"C:\" is false, Sys.file_exists \"C:\\\\\" true\n+         *)\n+        let l_min =\n+          match l with\n+            | [] -> [ \"\" ]\n+            | _ -> l\n+        in\n+        let l =\n+          if is_network_root then\n+            \"\"::\"\"::l_min\n+          else if is_unix_root then\n+            \"\"::l_min\n+          else if is_currel then\n+            \".\"::l\n+          else\n+            match l with\n+              | s :: [] ->\n+                  (* root folders like C:\\ *)\n+                  if String.length s = 2 && s.[1] = ':' &&\n+                    len > 2 && is_path_sep str.[2]\n+                  then\n+                    s :: [ \"\" ]\n+                  else\n+                    l\n+              | _ -> l\n+        in\n+          String.concat path_sep l\n+\n+\n \n let make =\n   function\n@@ -40,22 +152,31 @@\n   match Sys.os_type with\n   | \"Unix\" | \"Cygwin\" -> ufn\n   | \"Win32\" ->\n-    make\n-      (List.map\n-         (fun p ->\n-            if p = Unix.current_dir_name then\n-              current_dir_name\n-            else if p = Unix.parent_dir_name then\n-              parent_dir_name\n+    let path_sep =\n+      if use_bash () then\n+        \"/\"\n             else\n-              p)\n-         (OASISString.nsplit ufn '/'))\n+        \"\\\\\"\n+    in\n+    uniform_path path_sep ufn\n   | os_type ->\n     OASISUtils.failwithf\n       (f_ \"Don't know the path format of os_type %S when translating unix \\\n            filename. %S\")\n       os_type ufn\n \n+(* see findlib's src/findlib/frontend.ml for details *)\n+let ocamlfind_unquote dir =\n+  match Sys.os_type with\n+  | \"Cygwin\"\n+  | \"Win32\" ->\n+    let len = String.length dir in\n+    if len < 3 || dir.[0] <> '\"' || dir.[len - 1] <> '\"' ||\n+       String.contains dir ' ' = false then\n+      dir\n+    else\n+      String.sub dir 1 (len - 2)\n+  | _ -> dir\n \n (* END EXPORT *)\n \n--- ./src/oasis/OASISHostPath.mli\n+++ ./src/oasis/OASISHostPath.mli\n@@ -29,6 +29,27 @@\n open OASISTypes\n \n \n+(**\n+    The function should return an unix like shell,\n+    that will be used to execute external commands.\n+\n+    The default function returns an empty string.\n+    (system default will be used)\n+*)\n+val bash_cmd : (unit -> host_filename) ref\n+\n+(** True, if bash_cmd_program will return a non-empty\n+    host_filename *)\n+val use_bash: unit -> bool\n+\n+\n+(**\n+   On windows, the Unix quote function\n+   will be used, if use_base () is true.\n+   Otherwise identic to Filename.quote\n+*)\n+val quote: string -> string\n+\n (** Create a filename out of its components.\n *)\n val make: host_filename list -> host_filename\n@@ -57,5 +78,9 @@\n val add_extension: host_filename -> string -> host_filename\n \n \n+(** Unquote functions for filenames from 'ocamlfind query ...' *)\n+val ocamlfind_unquote: string -> string\n+\n+\n (** Map for host filename. {b Not exported.} *)\n module Map: OASISUtils.MapExt.S with type key = host_filename\n--- ./src/oasis/OASISObject.ml\n+++ ./src/oasis/OASISObject.ml\n@@ -54,6 +54,7 @@\n     ~ctxt\n     ~is_native\n     ~source_file_exists\n+    ~ext_obj\n     (cs, bs, obj) =\n \n   let find_module ext modul =\n@@ -67,12 +68,12 @@\n       | [ m ] -> (find_module \".cmi\" m,\n           find_module \".cmo\" m,\n           find_module \".cmx\" m,\n-          find_module \".o\" m,\n+          find_module ext_obj m,\n           fun x -> x)\n       | _ -> ([cs.cs_name ^ \".cmi\"],\n           [cs.cs_name ^ \".cmo\"],\n           [cs.cs_name ^ \".cmx\"],\n-          [cs.cs_name ^ \".o\"],\n+          [cs.cs_name ^ ext_obj],\n           OASISUnixPath.concat bs.bs_path)\n   in\n   List.map (List.map f) (\n--- ./src/oasis/OASISObject.mli\n+++ ./src/oasis/OASISObject.mli\n@@ -49,6 +49,7 @@\n   ctxt:OASISContext.t ->\n   is_native:bool ->\n   source_file_exists:(unix_filename -> bool) ->\n+  ext_obj:string ->\n   common_section * build_section * object_ ->\n   unix_filename list list\n \n--- ./src/oasis/OASISString.ml\n+++ ./src/oasis/OASISString.ml\n@@ -169,18 +169,34 @@\n   else\n     s\n \n-(* END EXPORT *)\n+let exists f str =\n+  let rec iter i =\n+    if i < 0 then\n+      false\n+    else if f str.[i] then\n+      true\n+    else\n+      iter (pred i)\n+  in\n+    iter (String.length str - 1)\n \n-(*  TODO: replace lowercase_ascii, capitalize_ascii and uncapitalize_ascii\n-    functions by String.*_ascii function when OCaml minimal version will be\n-    4.03.0.\n- *)\n+let is_digit c =\n+  '0' <= c && c <= '9'\n+\n+let is_alpha c =\n+  ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')\n \n let is_whitespace =\n   function\n     | ' ' | '\\r' | '\\n' | '\\t' -> true\n     |  _  -> false\n \n+(* END EXPORT *)\n+\n+(*  TODO: replace lowercase_ascii, capitalize_ascii and uncapitalize_ascii\n+    functions by String.*_ascii function when OCaml minimal version will be\n+    4.03.0.\n+ *)\n \n let tokenize ?(is_whitespace=is_whitespace) ?(tokens=[]) str =\n   let lst = ref [] in\n--- ./src/oasis/OASISValues.ml\n+++ ./src/oasis/OASISValues.ml\n@@ -494,6 +494,38 @@\n            space_separated.print (cmd :: args))\n     }\n \n+let command_line_warn =\n+  let c = command_line in\n+  let is_unix_centric_operator = function\n+    | \"&&\" | \";\" | \"||\" -> true\n+    | _ -> false\n+  in\n+\n+  let parse = ( fun ~ctxt s ->\n+                let (cmd,args) as cmd_args = c.parse ~ctxt s in\n+                  if String.length cmd > 0 && cmd.[0] <> '$' then\n+                    begin\n+                      OASISMessage.warning\n+                        ~ctxt\n+                        \"External commands may differ from platform to platform (%s)\"\n+                        cmd\n+                    end;\n+                  if List.exists is_unix_centric_operator args then\n+                    begin\n+                      OASISMessage.warning\n+                        ~ctxt\n+                        \"Command line '%s' seems to be *nix specific\"\n+                        (String.concat \"\" (cmd::args))\n+                    end;\n+                  cmd_args )\n+  in\n+    {\n+      parse ;\n+      update = c.update;\n+      print = c.print;\n+    }\n+\n+\n \n let command_line_options =\n   { parse = (fun ~ctxt:_ s -> POSIXShell.split s);\n--- ./src/oasis/OASISValues.mli\n+++ ./src/oasis/OASISValues.mli\n@@ -183,6 +183,9 @@\n val command_line: (string * string list) t\n \n \n+(** As above, but emmit warnings by dubious constructs *)\n+val command_line_warn : (string * string list) t\n+\n (** Arguments of command line programs.  See {!OASISUtils.POSIX.split}\n     for more information. *)\n val command_line_options: string list t\n--- ./src/oasis/OASISVersion.ml\n+++ ./src/oasis/OASISVersion.ml\n@@ -38,8 +38,8 @@\n \n \n (* Range of allowed characters *)\n-let is_digit c = '0' <= c && c <= '9'\n-let is_alpha c = ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')\n+let is_digit = OASISString.is_digit\n+let is_alpha = OASISString.is_alpha\n let is_special = function | '.' | '+' | '-' | '~' -> true | _ -> false\n \n \n--- ./src/plugins/custom/CustomPlugin.ml\n+++ ./src/plugins/custom/CustomPlugin.ml\n@@ -200,7 +200,7 @@\n       schema\n       id\n       nm\n-      command_line\n+      command_line_warn\n       (* TODO: remove when fun () -> s_ be replaced *)\n       (fun () -> s_ hlp)\n       data (fun _ t -> t.cmd_main)\n@@ -211,7 +211,7 @@\n       id\n       (nm^\"Clean\")\n       ~default:None\n-      (opt command_line)\n+      (opt command_line_warn)\n       (* TODO: remove when fun () -> s_ be replaced *)\n       (fun () -> s_ hlp_clean)\n       data (fun _ t -> t.cmd_clean)\n@@ -222,7 +222,7 @@\n       id\n       (nm^\"Distclean\")\n       ~default:None\n-      (opt command_line)\n+      (opt command_line_warn)\n       (* TODO: remove when fun () -> s_ be replaced *)\n       (fun () -> s_ hlp_distclean)\n       data (fun _ t -> t.cmd_distclean)\n@@ -426,7 +426,7 @@\n       id\n       \"Clean\"\n       ~default:None\n-      (opt command_line)\n+      (opt command_line_warn)\n       (fun () ->\n          s_ \"Run command to clean test step.\")\n       test_data (fun _ t -> t.cmd_clean)\n@@ -437,7 +437,7 @@\n       id\n       \"Distclean\"\n       ~default:None\n-      (opt command_line)\n+      (opt command_line_warn)\n       (fun () ->\n          s_ \"Run command to distclean test step.\")\n       test_data (fun _ t -> t.cmd_distclean)\n--- ./src/plugins/extra/devfiles/DevFilesPlugin.ml\n+++ ./src/plugins/extra/devfiles/DevFilesPlugin.ml\n@@ -201,7 +201,7 @@\n           Printf.bprintf buff\n             \"setup.exe: setup.ml%s\\n\\\n              \\tocamlfind ocamlopt -o $@%s setup.ml || ocamlfind ocamlc -o $@%s setup.ml || true\\n\\\n-             \\t$(RM) setup.cmi setup.cmo setup.cmx setup.o setup.cmt\\n\\n\"\n+             \\t$(RM) setup.cmi setup.cmo setup.cmx setup.o setup.obj setup.cmt\\n\\n\"\n             makefile_setup_deps packages packages;\n         end;\n         Buffer.add_string buff (\".PHONY: \"^(String.concat \" \" targets)^\"\\n\");\n@@ -226,7 +226,7 @@\n             Printf.sprintf\n               \"if [ ! -e setup.exe ] || [ _oasis -nt setup.exe ] || [ setup.ml -nt setup.exe ] || [ configure -nt setup.exe ]; then\\n  \\\n                ocamlfind ocamlopt -o setup.exe%s setup.ml || ocamlfind ocamlc -o setup.exe%s setup.ml || exit 1\\n  \\\n-               rm -f setup.cmi setup.cmo setup.cmx setup.o setup.cmt\\n\\\n+               rm -f setup.cmi setup.cmo setup.cmx setup.o setup.obj setup.cmt\\n\\\n                fi\\n\\\n                ./setup.exe -configure \\\"$@\\\"\"\n               packages packages\n--- ./src/plugins/internal/InternalInstallPlugin.ml\n+++ ./src/plugins/internal/InternalInstallPlugin.ml\n@@ -47,12 +47,21 @@\n let install_findlib_ev = \"install-findlib\"\n \n \n-(* TODO: this can be more generic and used elsewhere. *)\n-let win32_max_command_line_length = 8000\n-\n-\n let split_install_command ocamlfind findlib_name meta files =\n-  if Sys.os_type = \"Win32\" then\n+  if Sys.os_type <> \"Win32\" then\n+    [\"install\" :: findlib_name :: meta :: files]\n+  else\n+    let f s =\n+      OASISHostPath.quote ( OASISHostPath.of_unix s )\n+    in\n+    let files = List.map f files in\n+    let meta = f meta  in\n+    let win32_max_command_line_length =\n+      if OASISHostPath.use_bash () = false then\n+        7900\n+      else\n+        30000\n+    in\n     (* Arguments for the first command: *)\n     let first_args = [\"install\"; findlib_name; meta] in\n     (* Arguments for remaining commands: *)\n@@ -110,10 +119,11 @@\n                   let cmds = split other_args others in\n                   cmd :: cmds\n     in\n+    if files = [] then\n+      [ first_args ]\n+    else\n     (* The first command does not use -add: *)\n     split first_args files\n-  else\n-    [\"install\" :: findlib_name :: meta :: files]\n \n \n let install =\n@@ -534,7 +544,10 @@\n     if ev = install_file_ev then begin\n       if OASISFileUtil.file_exists_case data then begin\n         info (f_ \"Removing file '%s'\") data;\n-        Sys.remove data\n+        (try Sys.remove data\n+        with Sys_error _ when\n+            Sys.os_type = \"Win32\" &&\n+            Filename.basename data = \"setup.ml\" -> ());\n       end else begin\n         warning (f_ \"File '%s' doesn't exist anymore\") data\n       end\n--- ./src/plugins/ocamlbuild/MyOCamlbuildFindlib.ml\n+++ ./src/plugins/ocamlbuild/MyOCamlbuildFindlib.ml\n@@ -93,7 +93,9 @@\n   with Not_found -> s\n \n (* ocamlfind command *)\n-let ocamlfind x = S[Sh (exec_from_conf \"ocamlfind\"); x]\n+let ocamlfind x = S[Sh (\n+  Ocamlbuild_pack.Shell.quote_filename_if_needed\n+    (exec_from_conf \"ocamlfind\") ); x]\n \n (* This lists all supported packages. *)\n let find_packages () =\n--- ./src/plugins/ocamlbuild/OCamlbuildCommon.ml\n+++ ./src/plugins/ocamlbuild/OCamlbuildCommon.ml\n@@ -82,7 +82,7 @@\n \n       begin\n         match args.plugin_tags with\n-        | Some t -> [\"-plugin-tag\"; Filename.quote t]\n+        | Some t -> [\"-plugin-tag\"; OASISHostPath.quote t]\n         | None -> []\n       end;\n \n--- ./src/plugins/omake/OMakeEquip.ml\n+++ ./src/plugins/omake/OMakeEquip.ml\n@@ -197,6 +197,15 @@\n   subst [] ' ' 0\n \n \n+let file_exists_case fln =\n+  if Sys.file_exists fln = false then\n+    false\n+  else\n+    let dir = Filename.dirname fln in\n+    let base = Filename.basename fln in\n+    let files = Array.to_list (Sys.readdir dir) in\n+    List.mem base files\n+\n let fixup_module_case dir name =\n   let name_cap = OASISUnixPath.capitalize_file name in\n   let name_uncap = OASISUnixPath.uncapitalize_file name in\n@@ -205,7 +214,7 @@\n       List.find\n         (fun (name,ext) ->\n            let file = OASISUnixPath.concat dir (name ^ ext) in\n-           Sys.file_exists\n+           file_exists_case\n              (OASISHostPath.of_unix file)\n         )\n         [ name_cap, \".ml\";\n--- ./test/fake-ocamlfind/FakeOCamlfind.ml\n+++ ./test/fake-ocamlfind/FakeOCamlfind.ml\n@@ -30,4 +30,18 @@\n   in\n   let args = Sys.argv in\n     args.(0) <- real_ocamlfind;\n+    if Sys.os_type <> \"Win32\" then\n     Unix.execv real_ocamlfind args\n+    else\n+      let pid =\n+        Unix.create_process\n+          args.(0)\n+          args\n+          Unix.stdin\n+          Unix.stdout\n+          Unix.stderr\n+      in\n+      match snd (Unix.waitpid [] pid) with\n+      | Unix.WEXITED n -> exit n\n+      | Unix.WSIGNALED _ -> exit 2 (* like OCaml's uncaught exceptions *)\n+      | Unix.WSTOPPED _ -> exit 1\n--- ./test/test-common/TestCommon.ml\n+++ ./test/test-common/TestCommon.ml\n@@ -222,6 +222,17 @@\n       ~ctxt ?chdir ?foutput ?env ?exit_code ~use_stderr:true\n       cmd args\n \n+let file_exists_strict sfs fln =\n+  if sfs#file_exists fln = false then\n+    false\n+  else if Sys.os_type <> \"Win32\" then\n+    true\n+  else\n+    let fln_s = sfs#string_of_filename fln in\n+    let dir = Filename.dirname fln_s in\n+    let base = Filename.basename fln_s in\n+    let dirs = Array.to_list (Sys.readdir dir) in\n+    List.mem base dirs\n \n let assert_oasis_cli\n     ~ctxt\n--- ./test/test-common/TestFullUtils.ml\n+++ ./test/test-common/TestFullUtils.ml\n@@ -35,11 +35,11 @@\n \n \n let exec fn =\n-  if Sys.os_type = \"Win32\" then\n-    fn^\".exe\"\n-  else\n+  if Sys.os_type <> \"Win32\" ||\n+     Filename.check_suffix (OASISString.lowercase_ascii fn) \".exe\" then\n     fn\n-\n+  else\n+    fn ^ \".exe\"\n \n (* Print a short version of the filename *)\n let fn_printer ~root fn = FilePath.make_relative root fn\n@@ -192,9 +192,14 @@\n \n \n (* Create tree structure for a test project and copy it there. *)\n-let setup_test_directories test_ctxt ~is_native ~native_dynlink dn =\n+let setup_test_directories ?tmpdir_prefix test_ctxt ~is_native ~native_dynlink dn =\n   (* Create a temporary directory. *)\n-  let tmpdir = bracket_tmpdir test_ctxt in\n+  let prefix =\n+    match tmpdir_prefix with\n+      | None -> \"ounit-\"\n+      | Some x -> x\n+  in\n+  let tmpdir = bracket_tmpdir ~prefix test_ctxt in\n \n   (* Copy sources in this temporary directory. *)\n   let src_dir =\n@@ -256,7 +261,7 @@\n (* Precompile setup.ml to speedup the tests, if possible. *)\n let rec precompile_setup_ml test_ctxt t =\n   let setup_exe =\n-    Filename.concat t.precompile_dir (Filename.chop_extension setup_ml)\n+    exec (Filename.concat t.precompile_dir (Filename.chop_extension setup_ml))\n   in\n   let full_setup_ml = in_src_dir t setup_ml in\n \n@@ -280,16 +285,17 @@\n     let timer = timer_start \"precompile_setup_ml\" in\n     let exit_code =\n       FileUtil.cp ~force:FileUtil.Force [full_setup_ml] t.precompile_dir;\n-      Sys.command (\"ocamlfind ocamlc -o \"^setup_exe^\" \"\n-                   ^(Filename.concat t.precompile_dir setup_ml))\n+      let f1 = Filename.quote setup_exe in\n+      let f2 = Filename.quote (Filename.concat t.precompile_dir setup_ml) in\n+        Sys.command (\"ocamlfind ocamlc -o \"^f1^\" \"^f2)\n     in\n     timer_stop test_ctxt timer;\n     if exit_code = 0 then begin\n       (* Compilation succeed, update the digest *)\n-      logf test_ctxt `Info \"Compilation of setup.ml succeeds.\";\n+      logf test_ctxt `Info \"Compilation of setup.ml (%S) succeeds.\" setup_exe;\n       `Done_for (Digest.file full_setup_ml)\n     end else begin\n-      logf test_ctxt `Warning \"Compilation of setup.ml doesn't succeed.\";\n+      logf test_ctxt `Warning \"Compilation of setup.ml (%S) doesn't succeed.\" setup_exe;\n       `Not_possible\n     end\n   in\n@@ -308,7 +314,7 @@\n \n       | `Done_for digest ->\n           if (Digest.file full_setup_ml) = digest then begin\n-            Some (exec setup_exe)\n+            Some (setup_exe)\n           end else begin\n             t.setup_ml_precompiled <- compile ();\n             precompile_setup_ml test_ctxt t\n@@ -538,6 +544,10 @@\n   | InstalledBin of filename list\n \n \n+\n+let system =\n+  (BaseOCamlcConfig.var_define \"system\") ()\n+\n (* Register a set of files expected to be built. *)\n let register_installed_files test_ctxt t installed_files_lst =\n   let rec file_list =\n@@ -605,7 +615,12 @@\n                acc\n            | \"a\" ->\n                let fn =\n-                 if is_win32 then FilePath.replace_extension fn \"lib\" else fn\n+                 if not is_win32 then\n+                   fn\n+                 else\n+                   match system with\n+                     | \"mingw\" | \"mingw64\" -> fn\n+                     | _ -> FilePath.replace_extension fn \"lib\"\n                in\n                  if (* library matching the .cmxa *)\n                    t.is_native ||\n@@ -617,7 +632,7 @@\n                    (* no .a matching bytecode only library. *)\n                    acc\n            | \"so\" when is_win32 ->\n-               (FilePath.replace_extension fn \".dll\") :: acc\n+               (FilePath.replace_extension fn \"dll\") :: acc\n            | \"html\" when\n                FilePath.basename fn = \"index_extensions.html\" \n                && OASISVersion.StringVersion.compare t.ocaml_version \"4.02\" < 0 ->\n--- ./test/test-main/TestOASISLibrary.ml\n+++ ./test/test-main/TestOASISLibrary.ml\n@@ -44,7 +44,7 @@\n                   ~ctxt\n                   (cs, bs, lib)\n                   (fun fn ->\n-                     sfs#file_exists (OASISFileSystem.of_unix_filename fn))\n+                     file_exists_strict sfs (OASISFileSystem.of_unix_filename fn))\n               in\n               (List.flatten (List.rev_map snd lst)) @ acc\n             | Object _ | Executable _ | Flag _ | SrcRepo _ | Test _ | Doc _ ->\n--- ./test/test-main/TestOASISObject.ml\n+++ ./test/test-main/TestOASISObject.ml\n@@ -44,7 +44,7 @@\n                   ~ctxt\n                   (cs, bs, obj)\n                   (fun fn ->\n-                     sfs#file_exists (OASISFileSystem.of_unix_filename fn))\n+                     file_exists_strict sfs (OASISFileSystem.of_unix_filename fn))\n               in\n               (List.flatten (List.rev_map snd lst)) @ acc\n             | Library _ | Executable _ | Flag _ | SrcRepo _ | Test _ | Doc _ ->\n--- ./test/test-main/TestPluginOCamlbuild.ml\n+++ ./test/test-main/TestPluginOCamlbuild.ml\n@@ -27,6 +27,26 @@\n open OASISFileTemplate\n open TestFullUtils\n \n+let fln_normalize =\n+  if Sys.os_type <> \"Win32\" then\n+    fun a -> a\n+  else\n+    fun str ->\n+      let str =\n+        let str_lower = OASISString.lowercase_ascii str in\n+        if Filename.check_suffix str_lower \".exe\" then\n+          Filename.chop_extension str ^ \".exe\"\n+        else\n+          str\n+      in\n+      let len = String.length str in\n+      let b = Buffer.create len in\n+      for i = 0 to len - 1 do\n+        match String.get str i with\n+        | '/' -> Buffer.add_char b '\\\\'\n+        | c -> Buffer.add_char b c\n+      done;\n+      Buffer.contents b\n \n let all_tests =\n   [\n@@ -52,10 +72,12 @@\n        let env = BaseEnvLight.load ~filename:(in_src_dir t \"setup.data\") () in\n        let () =\n          assert_equal ~printer:(Printf.sprintf \"%S\")\n-           fake_ocamlfind\n-           (BaseEnvLight.var_get \"ocamlfind\" env);\n+           (fln_normalize fake_ocamlfind)\n+           (fln_normalize (BaseEnvLight.var_get \"ocamlfind\" env));\n          run_ocaml_setup_ml ~extra_env test_ctxt t [\"-build\"]\n        in\n+       (* ocamlbuild is called with -no-log on win32 *)\n+       skip_if (Sys.os_type = \"Win32\") \"UNIX test\";\n        let build_log =\n          file_content (in_src_dir t (Filename.concat \"_build\" \"_log\"))\n        in\n@@ -63,11 +85,15 @@\n          List.iter\n            (fun line ->\n               if OASISString.contains ~what:\"ocamlfind\" line then\n+                let what =\n+                  Ocamlbuild_pack.Shell.quote_filename_if_needed\n+                    fake_ocamlfind\n+                in\n                 assert_bool\n                   (Printf.sprintf\n                      \"line %S should starts with %S\"\n                      line fake_ocamlfind)\n-                  (OASISString.starts_with ~what:fake_ocamlfind line))\n+                  (OASISString.starts_with ~what line))\n            (OASISString.nsplit build_log '\\n'));\n \n     \"use-ocamlfind\",\n",
            "perm": 438
          }
        ],
        "opam": {
          "name": "oasis",
          "version": "0.4.11",
          "opam":
            "opam-version: \"2.0\"\nname: \"oasis\"\nversion: \"0.4.11\"\nsynopsis: \"Tooling for building OCaml libraries and applications\"\ndescription: \"\"\"\nOASIS generates a full configure, build and install system for your\napplication. It starts with a simple `_oasis` file at the toplevel of\nyour project and creates everything required.\n\nOASIS leverages existing OCaml tooling to perform most of it's work.\nIn fact, it might be more appropriate to think of it as simply the\nglue that binds these other subsystems together and coordinates the\nwork that they do. It should support the following tools:\n\n* OCamlbuild\n* OMake\n* OCamlMakefile (todo),\n* ocaml-autoconf (todo)\n\nIt also features a do-it-yourself command line invocation and an\ninternal configure/install scheme. Libraries are managed through\nfindlib. It has been tested on GNU Linux and Windows.\n\nIt also allows to have standard entry points and description. It helps\nto integrates your libraries and software with third parties tools\nlike OPAM.\"\"\"\nmaintainer: \"Sylvain Le Gall <sylvain@le-gall.net>\"\nauthors: \"Sylvain Le Gall\"\nlicense: \"LGPL-2.1 with OCaml linking exception\"\nhomepage: \"http://oasis.forge.ocamlcore.org/\"\nbug-reports: \"https://github.com/ocaml/oasis/issues\"\ndepends: [\n  \"ocaml\" {>= \"3.12.1\"}\n  \"base-unix\"\n  \"ocamlbuild\"\n  \"ocamlfind\" {build & >= \"1.3.1\"}\n  \"ocamlify\" {build}\n  \"ocamlmod\" {build}\n]\ndepopts: [\"benchmark\"]\nconflicts: [\n  \"benchmark\" {< \"1.2\"}\n  \"oasis-mirage\" {= \"0.3.0\"}\n  \"oasis-mirage\" {= \"0.3.0a\"}\n]\nbuild: [\n  [\"ocaml\" \"setup.ml\" \"-configure\" \"--prefix\" prefix]\n  [\"ocaml\" \"setup.ml\" \"-build\"]\n  [\"ocaml\" \"setup.ml\" \"-doc\"] {with-doc}\n]\ninstall: [\"ocaml\" \"setup.ml\" \"-install\"]\nremove: [\"ocaml\" \"%{etc}%/oasis/setup.ml\" \"-C\" \"%{etc}%/oasis\" \"-uninstall\"]\ndev-repo: \"git://github.com/ocaml/oasis.git\"\nextra-files: [\"oasis.install\" \"md5=ecc97c692bb2f70fe50124a88d705fde\"]\nurl {\n  src:\n    \"https://forge.ocamlcore.org/frs/download.php/1757/oasis-0.4.11.tar.gz\"\n  checksum: \"md5=98492f4657c2c5b30e3b1bc945e58419\"\n}",
          "override": {
            "build": [
              [
                "bash", "-c",
                "#{os == 'windows' ? 'patch -p1 < oasis-0.4.11.patch' : 'true'}"
              ],
              [
                "ocaml", "setup.ml", "-configure", "--prefix",
                "#{self.install}"
              ],
              [ "ocaml", "setup.ml", "-build" ]
            ],
            "install": [ [ "ocaml", "setup.ml", "-install" ] ]
          }
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/base-unix@opam:base",
        "@opam/ocamlbuild@opam:0", "@opam/ocamlfind@opam:1.8.0",
        "@opam/ocamlify@opam:0.0.1", "@opam/ocamlmod@opam:0.0.9",
        "ocaml@4.2.3006"
      ]
    },
    "@opam/merlin@opam:3.2.2": {
      "record": {
        "name": "@opam/merlin",
        "version": "opam:3.2.2",
        "source":
          "archive:https://github.com/ocaml/merlin/releases/download/v3.2.2/merlin-v3.2.2.tbz#md5:ede35b65f8ac9c440cfade5445662c54",
        "files": [],
        "opam": {
          "name": "merlin",
          "version": "3.2.2",
          "opam":
            "opam-version: \"2.0\"\nname: \"merlin\"\nversion: \"3.2.2\"\nsynopsis: \"Installation with Opam\"\ndescription: \"\"\"\nIf you have a working [Opam](https://opam.ocaml.org/) installation, Merlin is only two commands away:\n\n```shell\nopam install merlin\nopam user-setup install\n```\n\n[opam-user-setup](https://github.com/OCamlPro/opam-user-setup) takes care of configuring Emacs and Vim to make best use of your current install.\n\nYou can also [configure the editor](#editor-setup) yourself, if you prefer.\"\"\"\nmaintainer: \"defree@gmail.com\"\nauthors: \"The Merlin team\"\nhomepage: \"https://github.com/ocaml/merlin\"\nbug-reports: \"https://github.com/ocaml/merlin/issues\"\ndepends: [\n  \"ocaml\" {>= \"4.02.1\" & < \"4.08\"}\n  \"dune\" {build}\n  \"ocamlfind\" {>= \"1.5.2\"}\n  \"yojson\"\n  \"craml\" {with-test}\n]\nbuild: [\n  [\"dune\" \"subst\"] {pinned}\n  [\"dune\" \"build\" \"-p\" name \"-j\" jobs]\n]\npost-messages:\n  \"\"\"\nmerlin installed.\n\nQuick setup for VIM\n-------------------\nAppend this to your .vimrc to add merlin to vim's runtime-path:\n  let g:opamshare = substitute(system('opam config var share'),'\\\\n$','','''')\n  execute \"set rtp+=\" . g:opamshare . \"/merlin/vim\"\n\nAlso run the following line in vim to index the documentation:\n  :execute \"helptags \" . g:opamshare . \"/merlin/vim/doc\"\n\nQuick setup for EMACS\n-------------------\nAdd opam emacs directory to your load-path by appending this to your .emacs:\n  (let ((opam-share (ignore-errors (car (process-lines \"opam\" \"config\" \"var\" \"share\")))))\n   (when (and opam-share (file-directory-p opam-share))\n    ;; Register Merlin\n    (add-to-list 'load-path (expand-file-name \"emacs/site-lisp\" opam-share))\n    (autoload 'merlin-mode \"merlin\" nil t nil)\n    ;; Automatically start it in OCaml buffers\n    (add-hook 'tuareg-mode-hook 'merlin-mode t)\n    (add-hook 'caml-mode-hook 'merlin-mode t)\n    ;; Use opam switch to lookup ocamlmerlin binary\n    (setq merlin-command 'opam)))\n\nTake a look at https://github.com/ocaml/merlin for more information\n\nQuick setup with opam-user-setup\n--------------------------------\n\nOpam-user-setup support Merlin.\n\n  $ opam user-setup install\n\nshould take care of basic setup.\nSee https://github.com/OCamlPro/opam-user-setup\"\"\"\n    {success & !user-setup:installed}\ndev-repo: \"git+https://github.com/ocaml/merlin.git\"\nurl {\n  src:\n    \"https://github.com/ocaml/merlin/releases/download/v3.2.2/merlin-v3.2.2.tbz\"\n  checksum: \"md5=ede35b65f8ac9c440cfade5445662c54\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/dune@opam:1.3.0",
        "@opam/ocamlfind@opam:1.8.0", "@opam/yojson@opam:1.4.1",
        "ocaml@4.2.3006"
      ]
    },
    "@opam/markup@github:aantron/markup.ml:markup.opam#9f8e77": {
      "record": {
        "name": "@opam/markup",
        "version": "github:aantron/markup.ml:markup.opam#9f8e77",
        "source": "github:aantron/markup.ml:markup.opam#9f8e77",
        "files": [],
        "opam": {
          "name": "markup",
          "version": "dev",
          "opam":
            "opam-version: \"1.2\"\nversion: \"dev\"\nmaintainer: \"Anton Bachin <antonbachin@yahoo.com>\"\nauthors: \"Anton Bachin <antonbachin@yahoo.com>\"\nlicense: \"BSD\"\nhomepage: \"https://github.com/aantron/markup.ml\"\ndoc: \"http://aantron.github.io/markup.ml\"\nbug-reports: \"https://github.com/aantron/markup.ml/issues\"\ndepends: [\n  \"bisect_ppx\" {>= \"1.3.0\"}\n  \"dune\" {build}\n  \"ounit\" {test}\n  \"uchar\"\n  \"uutf\" {>= \"1.0.0\"}\n]\nbuild: [\"dune\" \"build\" \"-p\" name \"-j\" jobs]\ndev-repo: \"git+https://github.com/aantron/markup.ml.git\"",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/bisect_ppx@opam:1.3.4",
        "@opam/dune@opam:1.3.0", "@opam/uchar@opam:0.0.2",
        "@opam/uutf@opam:1.0.1"
      ]
    },
    "@opam/logs@opam:0.6.2": {
      "record": {
        "name": "@opam/logs",
        "version": "opam:0.6.2",
        "source":
          "archive:http://erratique.ch/software/logs/releases/logs-0.6.2.tbz#md5:19f824c02c83c6dddc3bfb6459e4743e",
        "files": [],
        "opam": {
          "name": "logs",
          "version": "0.6.2",
          "opam":
            "opam-version: \"2.0\"\nname: \"logs\"\nversion: \"0.6.2\"\nsynopsis: \"Logging infrastructure for OCaml\"\ndescription: \"\"\"\nLogs provides a logging infrastructure for OCaml. Logging is performed\non sources whose reporting level can be set independently. Log message\nreport is decoupled from logging and is handled by a reporter.\n\nA few optional log reporters are distributed with the base library and\nthe API easily allows to implement your own.\n\n`Logs` depends only on the `result` compatibility package. The\noptional `Logs_fmt` reporter on OCaml formatters depends on [Fmt][fmt].\nThe optional `Logs_browser` reporter that reports to the web browser\nconsole depends on [js_of_ocaml][jsoo]. The optional `Logs_cli` library\nthat provides command line support for controlling Logs depends on\n[`Cmdliner`][cmdliner]. The optional `Logs_lwt` library that provides Lwt logging\nfunctions depends on [`Lwt`][lwt]\n\nLogs and its reporters are distributed under the ISC license.\n\n[fmt]: http://erratique.ch/software/fmt\n[jsoo]: http://ocsigen.org/js_of_ocaml/\n[cmdliner]: http://erratique.ch/software/cmdliner\n[lwt]: http://ocsigen.org/lwt/\"\"\"\nmaintainer: \"Daniel B端nzli <daniel.buenzl i@erratique.ch>\"\nauthors: \"Daniel B端nzli <daniel.buenzl i@erratique.ch>\"\nlicense: \"ISC\"\ntags: [\"log\" \"system\" \"org:erratique\"]\nhomepage: \"http://erratique.ch/software/logs\"\ndoc: \"http://erratique.ch/software/logs/doc\"\nbug-reports: \"https://github.com/dbuenzli/logs/issues\"\ndepends: [\n  \"ocaml\" {>= \"4.01.0\"}\n  \"ocamlfind\" {build}\n  \"ocamlbuild\" {build}\n  \"topkg\" {build}\n  \"result\"\n  \"mtime\" {with-test}\n]\ndepopts: [\"js_of_ocaml\" \"fmt\" \"cmdliner\" \"lwt\"]\nconflicts: [\n  \"cmdliner\" {< \"0.9.8\"}\n]\nbuild: [\n  \"ocaml\"\n  \"pkg/pkg.ml\"\n  \"build\"\n  \"--pinned\"\n  \"%{pinned}%\"\n  \"--with-js_of_ocaml\"\n  \"%{js_of_ocaml:installed}%\"\n  \"--with-fmt\"\n  \"%{fmt:installed}%\"\n  \"--with-cmdliner\"\n  \"%{cmdliner:installed}%\"\n  \"--with-lwt\"\n  \"%{lwt:installed}%\"\n]\ndev-repo: \"git+http://erratique.ch/repos/logs.git\"\nurl {\n  src: \"http://erratique.ch/software/logs/releases/logs-0.6.2.tbz\"\n  checksum: \"md5=19f824c02c83c6dddc3bfb6459e4743e\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/ocamlbuild@opam:0",
        "@opam/ocamlfind@opam:1.8.0", "@opam/result@opam:1.3",
        "@opam/topkg@opam:1.0.0", "ocaml@4.2.3006"
      ]
    },
    "@opam/lambdasoup@opam:0.6.3": {
      "record": {
        "name": "@opam/lambdasoup",
        "version": "opam:0.6.3",
        "source":
          "archive:https://github.com/aantron/lambda-soup/archive/0.6.3.tar.gz#md5:a610e0d26ddafe48fd631f71878db5ec",
        "files": [],
        "opam": {
          "name": "lambdasoup",
          "version": "0.6.3",
          "opam":
            "opam-version: \"2.0\"\nname: \"lambdasoup\"\nversion: \"0.6.3\"\nsynopsis: \"Easy functional HTML scraping and manipulation with CSS selectors\"\ndescription: \"\"\"\nLambda Soup is an HTML scraping library inspired by Python's Beautiful Soup. It\nprovides lazy traversals from HTML nodes to their parents, children, siblings,\netc., and to nodes matching CSS selectors. The traversals can be manipulated\nusing standard functional combinators such as fold, filter, and map.\n\nThe DOM tree is mutable. You can use Lambda Soup for automatic HTML rewriting in\nscripts. Lambda Soup rewrites its own ocamldoc page this way.\n\nA major goal of Lambda Soup is to be easy to use, including in interactive\nsessions, and to have a minimal learning curve. It is a very simple library.\"\"\"\nmaintainer: \"Anton Bachin <antonbachin@yahoo.com>\"\nauthors: \"Anton Bachin <antonbachin@yahoo.com>\"\nlicense: \"BSD\"\nhomepage: \"https://github.com/aantron/lambda-soup\"\ndoc: \"http://aantron.github.io/lambda-soup\"\nbug-reports: \"https://github.com/aantron/lambda-soup/issues\"\ndepends: [\n  \"ocaml\"\n  \"jbuilder\" {build & >= \"1.0+beta10\"}\n  \"markup\" {>= \"0.7.1\"}\n  \"ounit\" {with-test}\n]\nbuild: [\"jbuilder\" \"build\" \"-p\" name \"-j\" jobs]\ndev-repo: \"git+https://github.com/aantron/lambda-soup.git\"\nurl {\n  src: \"https://github.com/aantron/lambda-soup/archive/0.6.3.tar.gz\"\n  checksum: \"md5=a610e0d26ddafe48fd631f71878db5ec\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/jbuilder@opam:transition",
        "@opam/markup@github:aantron/markup.ml:markup.opam#9f8e77",
        "ocaml@4.2.3006"
      ]
    },
    "@opam/js-build-tools@opam:113.33.04": {
      "record": {
        "name": "@opam/js-build-tools",
        "version": "opam:113.33.04",
        "source":
          "archive:https://ocaml.janestreet.com/ocaml-core/113.33/files/js-build-tools-113.33.04.tar.gz#md5:25e2657622a2be4dac42adc2ea148999",
        "files": [],
        "opam": {
          "name": "js-build-tools",
          "version": "113.33.04",
          "opam":
            "opam-version: \"2.0\"\nname: \"js-build-tools\"\nversion: \"113.33.04\"\nsynopsis: \"Collection of tools to help building Jane Street Packages\"\ndescription: \"\"\"\nThis packages contains tools to help building Jane Street\nPackages. However most of it is general purpose.\nIt contains::\n- an oasis2opam-install tool to produce a .install file from the oasis\n  build log\n- an js_build_tools ocamlbuild plugin with various goodies\"\"\"\nmaintainer: \"opensource@janestreet.com\"\nauthors: \"Jane Street Group, LLC <opensource@janestreet.com>\"\nlicense: \"Apache-2.0\"\nhomepage: \"https://github.com/janestreet/js-build-tools\"\nbug-reports: \"https://github.com/janestreet/js-build-tools/issues\"\ndepends: [\n  \"ocaml\" {>= \"4.02.3\"}\n  \"ocamlbuild\" {build}\n  \"ocamlfind\" {build & >= \"1.3.2\"}\n  \"ocamlbuild\"\n]\nbuild: [\n  [\"./configure\" \"--prefix\" prefix]\n  [make]\n]\ndev-repo: \"git+https://github.com/janestreet/js-build-tools.git\"\nurl {\n  src:\n    \"https://ocaml.janestreet.com/ocaml-core/113.33/files/js-build-tools-113.33.04.tar.gz\"\n  checksum: \"md5=25e2657622a2be4dac42adc2ea148999\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/ocamlbuild@opam:0",
        "@opam/ocamlfind@opam:1.8.0", "ocaml@4.2.3006"
      ]
    },
    "@opam/jbuilder@opam:transition": {
      "record": {
        "name": "@opam/jbuilder",
        "version": "opam:transition",
        "source": "no-source:",
        "files": [],
        "opam": {
          "name": "jbuilder",
          "version": "transition",
          "opam":
            "opam-version: \"2.0\"\nname: \"jbuilder\"\nversion: \"transition\"\nsynopsis:\n  \"This is a transition package, jbuilder is now named dune. Use the dune\"\ndescription: \"package instead.\"\nmaintainer: \"opensource@janestreet.com\"\nauthors: \"Jane Street Group, LLC <opensource@janestreet.com>\"\nlicense: \"MIT\"\nhomepage: \"https://github.com/ocaml/dune\"\nbug-reports: \"https://github.com/ocaml/dune/issues\"\ndepends: [\"ocaml\" \"dune\"]\npost-messages:\n  \"Jbuilder has been renamed and the jbuilder package is now a transition package. Use the dune package instead.\"\ndev-repo: \"git+https://github.com/ocaml/dune.git\"",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/dune@opam:1.3.0", "ocaml@4.2.3006"
      ]
    },
    "@opam/fpath@opam:0.7.2": {
      "record": {
        "name": "@opam/fpath",
        "version": "opam:0.7.2",
        "source":
          "archive:http://erratique.ch/software/fpath/releases/fpath-0.7.2.tbz#md5:52c7ecb0bf180088336f3c645875fa41",
        "files": [],
        "opam": {
          "name": "fpath",
          "version": "0.7.2",
          "opam":
            "opam-version: \"2.0\"\nname: \"fpath\"\nversion: \"0.7.2\"\nsynopsis: \"File system paths for OCaml\"\ndescription: \"\"\"\nFpath is an OCaml module for handling file system paths with POSIX or\nWindows conventions. Fpath processes paths without accessing the file\nsystem and is independent from any system library.\n\nFpath depends on [Astring][astring] and is distributed under the ISC\nlicense.\n\n[astring]: http://erratique.ch/software/astring\"\"\"\nmaintainer: \"Daniel B端nzli <daniel.buenzl i@erratique.ch>\"\nauthors: \"Daniel B端nzli <daniel.buenzl i@erratique.ch>\"\nlicense: \"ISC\"\ntags: [\"file\" \"system\" \"path\" \"org:erratique\"]\nhomepage: \"http://erratique.ch/software/fpath\"\ndoc: \"http://erratique.ch/software/fpath/doc\"\nbug-reports: \"https://github.com/dbuenzli/fpath/issues\"\ndepends: [\n  \"ocaml\" {>= \"4.01.0\"}\n  \"ocamlfind\" {build}\n  \"ocamlbuild\" {build}\n  \"topkg\" {build & >= \"0.9.0\"}\n  \"result\"\n  \"astring\"\n]\nbuild: [\"ocaml\" \"pkg/pkg.ml\" \"build\" \"--dev-pkg\" \"%{pinned}%\"]\ndev-repo: \"git+http://erratique.ch/repos/fpath.git\"\nurl {\n  src: \"http://erratique.ch/software/fpath/releases/fpath-0.7.2.tbz\"\n  checksum: \"md5=52c7ecb0bf180088336f3c645875fa41\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/astring@opam:0.8.3",
        "@opam/ocamlbuild@opam:0", "@opam/ocamlfind@opam:1.8.0",
        "@opam/result@opam:1.3", "@opam/topkg@opam:1.0.0", "ocaml@4.2.3006"
      ]
    },
    "@opam/fmt@opam:0.8.5": {
      "record": {
        "name": "@opam/fmt",
        "version": "opam:0.8.5",
        "source":
          "archive:http://erratique.ch/software/fmt/releases/fmt-0.8.5.tbz#md5:77b64aa6f20f09de28f2405d6195f12c",
        "files": [],
        "opam": {
          "name": "fmt",
          "version": "0.8.5",
          "opam":
            "opam-version: \"2.0\"\nname: \"fmt\"\nversion: \"0.8.5\"\nsynopsis: \"OCaml Format pretty-printer combinators\"\ndescription: \"\"\"\nFmt exposes combinators to devise `Format` pretty-printing functions.\n\nFmt depends only on the OCaml standard library. The optional `Fmt_tty`\nlibrary that allows to setup formatters for terminal color output\ndepends on the Unix library. The optional `Fmt_cli` library that\nprovides command line support for Fmt depends on [`Cmdliner`][cmdliner].\n\nFmt is distributed under the ISC license.\n\n[cmdliner]: http://erratique.ch/software/cmdliner\"\"\"\nmaintainer: \"Daniel B端nzli <daniel.buenzl i@erratique.ch>\"\nauthors: [\"Daniel B端nzli <daniel.buenzl i@erratique.ch>\" \"Gabriel Radanne\"]\nlicense: \"ISC\"\ntags: [\"string\" \"format\" \"pretty-print\" \"org:erratique\"]\nhomepage: \"http://erratique.ch/software/fmt\"\ndoc: \"http://erratique.ch/software/fmt\"\nbug-reports: \"https://github.com/dbuenzli/fmt/issues\"\ndepends: [\n  \"ocaml\" {>= \"4.01.0\"}\n  \"ocamlfind\" {build}\n  \"ocamlbuild\" {build}\n  \"topkg\" {build & >= \"0.9.0\"}\n  \"result\"\n  \"uchar\"\n]\ndepopts: [\"base-unix\" \"cmdliner\"]\nconflicts: [\n  \"cmdliner\" {< \"0.9.8\"}\n]\nbuild: [\n  \"ocaml\"\n  \"pkg/pkg.ml\"\n  \"build\"\n  \"--dev-pkg\"\n  \"%{pinned}%\"\n  \"--with-base-unix\"\n  \"%{base-unix:installed}%\"\n  \"--with-cmdliner\"\n  \"%{cmdliner:installed}%\"\n]\ndev-repo: \"git+http://erratique.ch/repos/fmt.git\"\nurl {\n  src: \"http://erratique.ch/software/fmt/releases/fmt-0.8.5.tbz\"\n  checksum: \"md5=77b64aa6f20f09de28f2405d6195f12c\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/ocamlbuild@opam:0",
        "@opam/ocamlfind@opam:1.8.0", "@opam/result@opam:1.3",
        "@opam/topkg@opam:1.0.0", "@opam/uchar@opam:0.0.2", "ocaml@4.2.3006"
      ]
    },
    "@opam/easy-format@opam:1.3.1": {
      "record": {
        "name": "@opam/easy-format",
        "version": "opam:1.3.1",
        "source":
          "archive:https://github.com/mjambon/easy-format/archive/v1.3.1.tar.gz#md5:4e163700fb88fdcd6b8976c3a216c8ea",
        "files": [],
        "opam": {
          "name": "easy-format",
          "version": "1.3.1",
          "opam":
            "opam-version: \"2.0\"\nname: \"easy-format\"\nversion: \"1.3.1\"\nsynopsis:\n  \"High-level and functional interface to the Format module of the OCaml standard library\"\nmaintainer: \"martin@mjambon.com\"\nauthors: \"Martin Jambon\"\nhomepage: \"http://mjambon.com/easy-format.html\"\nbug-reports: \"https://github.com/mjambon/easy-format/issues\"\ndepends: [\n  \"ocaml\" {>= \"4.02.3\"}\n  \"jbuilder\" {build}\n]\nbuild: [\n  [\"jbuilder\" \"build\" \"-p\" name \"-j\" jobs]\n  [\"jbuilder\" \"runtest\" \"-p\" name] {with-test}\n]\ndev-repo: \"git+https://github.com/mjambon/easy-format.git\"\nurl {\n  src: \"https://github.com/mjambon/easy-format/archive/v1.3.1.tar.gz\"\n  checksum: \"md5=4e163700fb88fdcd6b8976c3a216c8ea\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/jbuilder@opam:transition",
        "ocaml@4.2.3006"
      ]
    },
    "@opam/dune@opam:1.3.0": {
      "record": {
        "name": "@opam/dune",
        "version": "opam:1.3.0",
        "source":
          "archive:https://github.com/ocaml/dune/releases/download/1.3.0/dune-1.3.0.tbz#md5:d7c926bd6b7549cb54d5463aaccf0c91",
        "files": [],
        "opam": {
          "name": "dune",
          "version": "1.3.0",
          "opam":
            "opam-version: \"2.0\"\nname: \"dune\"\nversion: \"1.3.0\"\nsynopsis: \"Fast, portable and opinionated build system\"\ndescription: \"\"\"\ndune is a build system that was designed to simplify the release of\nJane Street packages. It reads metadata from \"dune\" files following a\nvery simple s-expression syntax.\n\ndune is fast, it has very low-overhead and support parallel builds on\nall platforms. It has no system dependencies, all you need to build\ndune and packages using dune is OCaml. You don't need or make or bash\nas long as the packages themselves don't use bash explicitly.\n\ndune supports multi-package development by simply dropping multiple\nrepositories into the same directory.\n\nIt also supports multi-context builds, such as building against\nseveral opam roots/switches simultaneously. This helps maintaining\npackages across several versions of OCaml and gives cross-compilation\nfor free.\"\"\"\nmaintainer: \"opensource@janestreet.com\"\nauthors: \"Jane Street Group, LLC <opensource@janestreet.com>\"\nlicense: \"MIT\"\nhomepage: \"https://github.com/ocaml/dune\"\nbug-reports: \"https://github.com/ocaml/dune/issues\"\ndepends: [\n  \"ocaml\" {>= \"4.02\"}\n]\nconflicts: [\n  \"jbuilder\" {!= \"transition\"}\n]\nbuild: [\n  [\"ocaml\" \"configure.ml\" \"--libdir\" lib] {opam-version < \"2\"}\n  [\"ocaml\" \"bootstrap.ml\"]\n  [\"./boot.exe\" \"--release\" \"--subst\"] {pinned}\n  [\"./boot.exe\" \"--release\" \"-j\" jobs]\n]\ndev-repo: \"git+https://github.com/ocaml/dune.git\"\nurl {\n  src: \"https://github.com/ocaml/dune/releases/download/1.3.0/dune-1.3.0.tbz\"\n  checksum: \"md5=d7c926bd6b7549cb54d5463aaccf0c91\"\n}",
          "override": {
            "build": [
              [ "ocaml", "bootstrap.ml" ],
              [ "./boot.exe", "--release", "-j", "4" ]
            ]
          }
        }
      },
      "dependencies": [ "@esy-ocaml/substs@0.0.1", "ocaml@4.2.3006" ]
    },
    "@opam/cppo@opam:1.6.5": {
      "record": {
        "name": "@opam/cppo",
        "version": "opam:1.6.5",
        "source":
          "archive:https://github.com/mjambon/cppo/archive/v1.6.5.tar.gz#md5:1cd25741d31417995b0973fe0b6f6c82",
        "files": [],
        "opam": {
          "name": "cppo",
          "version": "1.6.5",
          "opam":
            "opam-version: \"2.0\"\nname: \"cppo\"\nversion: \"1.6.5\"\nsynopsis: \"Equivalent of the C preprocessor for OCaml programs\"\nmaintainer: \"martin@mjambon.com\"\nauthors: \"Martin Jambon\"\nlicense: \"BSD-3-Clause\"\nhomepage: \"https://github.com/mjambon/cppo\"\nbug-reports: \"https://github.com/mjambon/cppo/issues\"\ndepends: [\n  \"ocaml\"\n  \"jbuilder\" {build & >= \"1.0+beta17\"}\n  \"base-unix\"\n]\nbuild: [\n  [\"jbuilder\" \"subst\" \"-p\" name] {pinned}\n  [\"jbuilder\" \"build\" \"-p\" name \"-j\" jobs]\n  [\"jbuilder\" \"runtest\" \"-p\" name] {with-test}\n]\ndev-repo: \"git+https://github.com/mjambon/cppo.git\"\nurl {\n  src: \"https://github.com/mjambon/cppo/archive/v1.6.5.tar.gz\"\n  checksum: \"md5=1cd25741d31417995b0973fe0b6f6c82\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/base-unix@opam:base",
        "@opam/jbuilder@opam:transition", "ocaml@4.2.3006"
      ]
    },
    "@opam/conf-which@opam:1": {
      "record": {
        "name": "@opam/conf-which",
        "version": "opam:1",
        "source": "no-source:",
        "files": [],
        "opam": {
          "name": "conf-which",
          "version": "1",
          "opam":
            "opam-version: \"2.0\"\nname: \"conf-which\"\nversion: \"1\"\nsynopsis: \"Virtual package relying on which\"\ndescription:\n  \"This package can only install if the which program is installed on the system.\"\nmaintainer: \"unixjunkie@sdf.org\"\nauthors: \"Carlo Wood\"\nlicense: \"GPL-2+\"\nhomepage: \"http://www.gnu.org/software/which/\"\nbug-reports: \"https://github.com/ocaml/opam-repository/issues\"\nbuild: [\"which\" \"which\"]\ndepexts: [\n  [\"which\"] {os-distribution = \"centos\"}\n  [\"which\"] {os-distribution = \"fedora\"}\n  [\"which\"] {os-distribution = \"opensuse\"}\n  [\"debianutils\"] {os-distribution = \"debian\"}\n  [\"debianutils\"] {os-distribution = \"ubuntu\"}\n  [\"which\"] {os-distribution = \"nixos\"}\n  [\"which\"] {os-distribution = \"archlinux\"}\n]",
          "override": null
        }
      },
      "dependencies": [ "@esy-ocaml/substs@0.0.1" ]
    },
    "@opam/conf-m4@opam:1": {
      "record": {
        "name": "@opam/conf-m4",
        "version": "opam:1",
        "source": "no-source:",
        "files": [],
        "opam": {
          "name": "conf-m4",
          "version": "1",
          "opam":
            "opam-version: \"2.0\"\nname: \"conf-m4\"\nversion: \"1\"\nsynopsis: \"Virtual package relying on m4\"\ndescription:\n  \"This package can only install if the m4 binary is installed on the system.\"\nmaintainer: \"tim@gfxmonk.net\"\nauthors: \"GNU Project\"\nlicense: \"GPL-3\"\nhomepage: \"http://www.gnu.org/software/m4/m4.html\"\nbug-reports: \"https://github.com/ocaml/opam-repository/issues\"\nbuild: [\"sh\" \"-exc\" \"echo | m4\"]\ndepexts: [\n  [\"m4\"] {os-distribution = \"debian\"}\n  [\"m4\"] {os-distribution = \"ubuntu\"}\n  [\"m4\"] {os-distribution = \"fedora\"}\n  [\"m4\"] {os-distribution = \"rhel\"}\n  [\"m4\"] {os-distribution = \"centos\"}\n  [\"m4\"] {os-distribution = \"alpine\"}\n  [\"m4\"] {os-distribution = \"nixos\"}\n  [\"m4\"] {os-distribution = \"opensuse\"}\n  [\"m4\"] {os-distribution = \"oraclelinux\"}\n  [\"m4\"] {os-distribution = \"archlinux\"}\n]",
          "override": null
        }
      },
      "dependencies": [ "@esy-ocaml/substs@0.0.1" ]
    },
    "@opam/cmdliner@opam:1.0.2": {
      "record": {
        "name": "@opam/cmdliner",
        "version": "opam:1.0.2",
        "source":
          "archive:http://erratique.ch/software/cmdliner/releases/cmdliner-1.0.2.tbz#md5:ab2f0130e88e8dcd723ac6154c98a881",
        "files": [],
        "opam": {
          "name": "cmdliner",
          "version": "1.0.2",
          "opam":
            "opam-version: \"2.0\"\nname: \"cmdliner\"\nversion: \"1.0.2\"\nsynopsis: \"Declarative definition of command line interfaces for OCaml\"\ndescription: \"\"\"\nCmdliner allows the declarative definition of command line interfaces\nfor OCaml.\n\nIt provides a simple and compositional mechanism to convert command\nline arguments to OCaml values and pass them to your functions. The\nmodule automatically handles syntax errors, help messages and UNIX man\npage generation. It supports programs with single or multiple commands\nand respects most of the [POSIX][1] and [GNU][2] conventions.\n\nCmdliner has no dependencies and is distributed under the ISC license.\n\n[1]: http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap12.html\n[2]: http://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html\"\"\"\nmaintainer: \"Daniel B端nzli <daniel.buenzl i@erratique.ch>\"\nauthors: \"Daniel B端nzli <daniel.buenzl i@erratique.ch>\"\nlicense: \"ISC\"\ntags: [\"cli\" \"system\" \"declarative\" \"org:erratique\"]\nhomepage: \"http://erratique.ch/software/cmdliner\"\ndoc: \"http://erratique.ch/software/cmdliner/doc/Cmdliner\"\nbug-reports: \"https://github.com/dbuenzli/cmdliner/issues\"\ndepends: [\n  \"ocaml\" {>= \"4.01.0\"}\n  \"ocamlfind\" {build}\n  \"ocamlbuild\" {build}\n  \"topkg\" {build}\n  \"result\"\n]\nbuild: [\"ocaml\" \"pkg/pkg.ml\" \"build\" \"--pinned\" \"%{pinned}%\"]\ndev-repo: \"git+http://erratique.ch/repos/cmdliner.git\"\nurl {\n  src: \"http://erratique.ch/software/cmdliner/releases/cmdliner-1.0.2.tbz\"\n  checksum: \"md5=ab2f0130e88e8dcd723ac6154c98a881\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/ocamlbuild@opam:0",
        "@opam/ocamlfind@opam:1.8.0", "@opam/result@opam:1.3",
        "@opam/topkg@opam:1.0.0", "ocaml@4.2.3006"
      ]
    },
    "@opam/bos@opam:0.2.0": {
      "record": {
        "name": "@opam/bos",
        "version": "opam:0.2.0",
        "source":
          "archive:http://erratique.ch/software/bos/releases/bos-0.2.0.tbz#md5:aeae7447567db459c856ee41b5a66fd2",
        "files": [],
        "opam": {
          "name": "bos",
          "version": "0.2.0",
          "opam":
            "opam-version: \"2.0\"\nname: \"bos\"\nversion: \"0.2.0\"\nsynopsis: \"Basic OS interaction for OCaml\"\ndescription: \"\"\"\nBos provides support for basic and robust interaction with the\noperating system in OCaml. It has functions to access the process\nenvironment, parse command line arguments, interact with the file\nsystem and run command line programs.\n\nBos works equally well on POSIX and Windows operating systems.\n\nBos depends on [Rresult][rresult], [Astring][astring], [Fmt][fmt],\n[Fpath][fpath] and [Logs][logs] and the OCaml Unix library. It is\ndistributed under the ISC license.\n\n[rresult]: http://erratique.ch/software/rresult\n[astring]: http://erratique.ch/software/astring\n[fmt]: http://erratique.ch/software/fmt\n[fpath]: http://erratique.ch/software/fpath\n[logs]: http://erratique.ch/software/logs\"\"\"\nmaintainer: \"Daniel B端nzli <daniel.buenzl i@erratique.ch>\"\nauthors: \"Daniel B端nzli <daniel.buenzl i@erratique.ch>\"\nlicense: \"ISC\"\ntags: [\n  \"os\" \"system\" \"cli\" \"command\" \"file\" \"path\" \"log\" \"unix\" \"org:erratique\"\n]\nhomepage: \"http://erratique.ch/software/bos\"\ndoc: \"http://erratique.ch/software/bos/doc\"\nbug-reports: \"https://github.com/dbuenzli/bos/issues\"\ndepends: [\n  \"ocaml\" {>= \"4.01.0\"}\n  \"ocamlfind\" {build}\n  \"ocamlbuild\" {build}\n  \"topkg\" {build & >= \"0.9.0\"}\n  \"base-unix\"\n  \"rresult\" {>= \"0.4.0\"}\n  \"astring\"\n  \"fpath\"\n  \"fmt\" {>= \"0.8.0\"}\n  \"logs\"\n  \"mtime\" {with-test}\n]\nbuild: [\"ocaml\" \"pkg/pkg.ml\" \"build\" \"--dev-pkg\" \"%{pinned}%\"]\ndev-repo: \"git+http://erratique.ch/repos/bos.git\"\nurl {\n  src: \"http://erratique.ch/software/bos/releases/bos-0.2.0.tbz\"\n  checksum: \"md5=aeae7447567db459c856ee41b5a66fd2\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/astring@opam:0.8.3",
        "@opam/base-unix@opam:base", "@opam/fmt@opam:0.8.5",
        "@opam/fpath@opam:0.7.2", "@opam/logs@opam:0.6.2",
        "@opam/ocamlbuild@opam:0", "@opam/ocamlfind@opam:1.8.0",
        "@opam/rresult@opam:0.6.0", "@opam/topkg@opam:1.0.0",
        "ocaml@4.2.3006"
      ]
    },
    "@opam/bisect_ppx@opam:1.3.4": {
      "record": {
        "name": "@opam/bisect_ppx",
        "version": "opam:1.3.4",
        "source":
          "archive:https://github.com/aantron/bisect_ppx/archive/1.3.4.tar.gz#md5:7371bd9a98c43b952bfa1ae2d374af3d",
        "files": [],
        "opam": {
          "name": "bisect_ppx",
          "version": "1.3.4",
          "opam":
            "opam-version: \"2.0\"\nname: \"bisect_ppx\"\nversion: \"1.3.4\"\nsynopsis: \"Code coverage for OCaml\"\ndescription: \"\"\"\nBisect_ppx helps you test thoroughly. It is a small preprocessor that inserts\ninstrumentation at places in your code, such as if-then-else and match\nexpressions. After you run tests, Bisect_ppx gives a nice HTML report showing\nwhich places were visited and which were missed.\n\nUsage is simple - add package bisect_ppx when building tests, then run the\nreport tool on the generated visitation files.\n\nThis is an advanced fork of the original Bisect coverage tool. It has many\nimprovements and updates.\n\n- Much more thorough code instrumentation, so you can find more gaps in your\n  testing.\n- Fast operation by default.\n- More legible and appealing HTML reports.\n- Various bugfixes.\n- No camlp4 dependency.\"\"\"\nmaintainer: [\n  \"Anton Bachin <antonbachin@yahoo.com>\"\n  \"Leonid Rozenberg <leonidr@gmail.com>\"\n]\nauthors: [\n  \"Xavier Clerc <bisect@x9c.fr>\"\n  \"Leonid Rozenberg <leonidr@gmail.com>\"\n  \"Anton Bachin <antonbachin@yahoo.com>\"\n]\nlicense: \"MPL2\"\nhomepage: \"https://github.com/aantron/bisect_ppx\"\nbug-reports: \"https://github.com/aantron/bisect_ppx/issues\"\ndepends: [\n  \"ocaml\" {>= \"4.02.0\"}\n  \"base-unix\"\n  \"jbuilder\" {build & >= \"1.0+beta13\"}\n  \"ocamlfind\" {with-test}\n  \"ocaml-migrate-parsetree\" {>= \"1.0.3\"}\n  \"ounit\" {with-test}\n  \"ppx_tools_versioned\"\n]\nconflicts: [\n  \"ocveralls\" {<= \"0.3.2\"}\n]\nbuild: [\n  [\"jbuilder\" \"build\" \"-p\" name \"-j\" jobs]\n  [\"jbuilder\" \"runtest\" \"-p\" name] {with-test}\n]\ndev-repo: \"git+https://github.com/aantron/bisect_ppx.git\"\nurl {\n  src: \"https://github.com/aantron/bisect_ppx/archive/1.3.4.tar.gz\"\n  checksum: \"md5=7371bd9a98c43b952bfa1ae2d374af3d\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/base-unix@opam:base",
        "@opam/jbuilder@opam:transition",
        "@opam/ocaml-migrate-parsetree@opam:1.1.0",
        "@opam/ppx_tools_versioned@opam:5.2.1", "ocaml@4.2.3006"
      ]
    },
    "@opam/biniou@opam:1.2.0": {
      "record": {
        "name": "@opam/biniou",
        "version": "opam:1.2.0",
        "source":
          "archive:https://github.com/mjambon/biniou/archive/v1.2.0.tar.gz#md5:f3e92358e832ed94eaf23ce622ccc2f9",
        "files": [],
        "opam": {
          "name": "biniou",
          "version": "1.2.0",
          "opam":
            "opam-version: \"2.0\"\nname: \"biniou\"\nversion: \"1.2.0\"\nsynopsis:\n  \"Binary data format designed for speed, safety, ease of use and backward compatibility as protocols evolve\"\nmaintainer: \"martin@mjambon.com\"\nauthors: \"Martin Jambon\"\nlicense: \"BSD-3-Clause\"\nhomepage: \"https://github.com/mjambon/biniou\"\nbug-reports: \"https://github.com/mjambon/biniou/issues\"\ndepends: [\n  \"ocaml\" {>= \"4.02.3\"}\n  \"conf-which\" {build}\n  \"jbuilder\" {build & >= \"1.0+beta7\"}\n  \"easy-format\"\n]\nbuild: [\n  [\"jbuilder\" \"build\" \"-p\" name \"-j\" jobs]\n  [\"jbuilder\" \"runtest\" \"-p\" name] {with-test}\n]\ndev-repo: \"git+https://github.com/mjambon/biniou.git\"\nurl {\n  src: \"https://github.com/mjambon/biniou/archive/v1.2.0.tar.gz\"\n  checksum: \"md5=f3e92358e832ed94eaf23ce622ccc2f9\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/conf-which@opam:1",
        "@opam/easy-format@opam:1.3.1", "@opam/jbuilder@opam:transition",
        "ocaml@4.2.3006"
      ]
    },
    "@opam/base-unix@opam:base": {
      "record": {
        "name": "@opam/base-unix",
        "version": "opam:base",
        "source": "no-source:",
        "files": [],
        "opam": {
          "name": "base-unix",
          "version": "base",
          "opam":
            "opam-version: \"2.0\"\nname: \"base-unix\"\nversion: \"base\"\nsynopsis: \"\"\ndescription: \"Unix library distributed with the OCaml compiler\"\nmaintainer: \"https://github.com/ocaml/opam-repository/issues\"",
          "override": null
        }
      },
      "dependencies": [ "@esy-ocaml/substs@0.0.1" ]
    },
    "@opam/base-ocamlbuild@opam:base": {
      "record": {
        "name": "@opam/base-ocamlbuild",
        "version": "opam:base",
        "source": "no-source:",
        "files": [],
        "opam": {
          "name": "base-ocamlbuild",
          "version": "base",
          "opam":
            "opam-version: \"2.0\"\nname: \"base-ocamlbuild\"\nversion: \"base\"\nsynopsis:\n  \"OCamlbuild binary and libraries distributed with the OCaml compiler\"\nmaintainer: \"gabriel.scherer@gmail.com\"\ndepends: [\n  \"ocaml\" {>= \"3.10\" & < \"4.03\"}\n]",
          "override": null
        }
      },
      "dependencies": [ "@esy-ocaml/substs@0.0.1", "ocaml@4.2.3006" ]
    },
    "@opam/base-bytes@opam:base": {
      "record": {
        "name": "@opam/base-bytes",
        "version": "opam:base",
        "source": "no-source:",
        "files": [],
        "opam": {
          "name": "base-bytes",
          "version": "base",
          "opam":
            "opam-version: \"2.0\"\nname: \"base-bytes\"\nversion: \"base\"\nsynopsis: \"Bytes library distributed with the OCaml compiler\"\nmaintainer: \" \"\nauthors: \" \"\nhomepage: \" \"\ndepends: [\n  \"ocaml\" {>= \"4.02.0\"}\n  \"ocamlfind\" {>= \"1.5.3\"}\n]",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/ocamlfind@opam:1.8.0",
        "ocaml@4.2.3006"
      ]
    },
    "@opam/astring@opam:0.8.3": {
      "record": {
        "name": "@opam/astring",
        "version": "opam:0.8.3",
        "source":
          "archive:http://erratique.ch/software/astring/releases/astring-0.8.3.tbz#md5:c5bf6352b9ac27fbeab342740f4fa870",
        "files": [],
        "opam": {
          "name": "astring",
          "version": "0.8.3",
          "opam":
            "opam-version: \"2.0\"\nname: \"astring\"\nversion: \"0.8.3\"\nsynopsis: \"Alternative String module for OCaml\"\ndescription: \"\"\"\nAstring exposes an alternative `String` module for OCaml. This module\ntries to balance minimality and expressiveness for basic, index-free,\nstring processing and provides types and functions for substrings,\nstring sets and string maps.\n\nRemaining compatible with the OCaml `String` module is a non-goal. The\n`String` module exposed by Astring has exception safe functions,\nremoves deprecated and rarely used functions, alters some signatures\nand names, adds a few missing functions and fully exploits OCaml's\nnewfound string immutability.\n\nAstring depends only on the OCaml standard library. It is distributed\nunder the ISC license.\"\"\"\nmaintainer: \"Daniel B端nzli <daniel.buenzl i@erratique.ch>\"\nauthors: \"Daniel B端nzli <daniel.buenzl i@erratique.ch>\"\nlicense: \"ISC\"\ntags: [\"string\" \"org:erratique\"]\nhomepage: \"http://erratique.ch/software/astring\"\ndoc: \"http://erratique.ch/software/astring/doc\"\nbug-reports: \"https://github.com/dbuenzli/astring/issues\"\ndepends: [\n  \"ocaml\" {>= \"4.01.0\"}\n  \"ocamlfind\" {build}\n  \"ocamlbuild\" {build}\n  \"topkg\" {build}\n  \"base-bytes\"\n]\nbuild: [\"ocaml\" \"pkg/pkg.ml\" \"build\" \"--pinned\" \"%{pinned}%\"]\ndev-repo: \"git+http://erratique.ch/repos/astring.git\"\nurl {\n  src: \"http://erratique.ch/software/astring/releases/astring-0.8.3.tbz\"\n  checksum: \"md5=c5bf6352b9ac27fbeab342740f4fa870\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/base-bytes@opam:base",
        "@opam/ocamlbuild@opam:0", "@opam/ocamlfind@opam:1.8.0",
        "@opam/topkg@opam:1.0.0", "ocaml@4.2.3006"
      ]
    },
    "@opam/alcotest@opam:0.8.3": {
      "record": {
        "name": "@opam/alcotest",
        "version": "opam:0.8.3",
        "source":
          "archive:https://github.com/mirage/alcotest/releases/download/0.8.3/alcotest-0.8.3.tbz#md5:597e6bb271bd42062f95aa67afdb9185",
        "files": [],
        "opam": {
          "name": "alcotest",
          "version": "0.8.3",
          "opam":
            "opam-version: \"2.0\"\nname: \"alcotest\"\nversion: \"0.8.3\"\nsynopsis: \"Alcotest is a lightweight and colourful test framework.\"\ndescription: \"\"\"\nAlcotest exposes simple interface to perform unit tests. It exposes\na simple TESTABLE module type, a check function to assert test\npredicates and a run function to perform a list of unit -> unit\ntest callbacks.\n\nAlcotest provides a quiet and colorful output where only faulty runs\nare fully displayed at the end of the run (with the full logs ready to\ninspect), with a simple (yet expressive) query language to select the\ntests to run.\"\"\"\nmaintainer: \"thomas@gazagnaire.org\"\nauthors: \"Thomas Gazagnaire\"\nlicense: \"ISC\"\nhomepage: \"https://github.com/mirage/alcotest/\"\ndoc: \"https://mirage.github.io/alcotest/\"\nbug-reports: \"https://github.com/mirage/alcotest/issues/\"\ndepends: [\n  \"ocaml\" {>= \"4.02.3\"}\n  \"jbuilder\" {build & >= \"1.0+beta10\"}\n  \"fmt\" {>= \"0.8.0\"}\n  \"astring\"\n  \"result\"\n  \"cmdliner\"\n]\nbuild: [\n  [\"jbuilder\" \"subst\" \"-p\" name] {pinned}\n  [\"jbuilder\" \"build\" \"-p\" name \"-j\" jobs]\n  [\"jbuilder\" \"runtest\" \"-p\" name \"-j\" jobs] {with-test}\n]\ndev-repo: \"git+https://github.com/mirage/alcotest.git\"\nurl {\n  src:\n    \"https://github.com/mirage/alcotest/releases/download/0.8.3/alcotest-0.8.3.tbz\"\n  checksum: \"md5=597e6bb271bd42062f95aa67afdb9185\"\n}",
          "override": null
        }
      },
      "dependencies": [
        "@esy-ocaml/substs@0.0.1", "@opam/astring@opam:0.8.3",
        "@opam/cmdliner@opam:1.0.2", "@opam/fmt@opam:0.8.5",
        "@opam/jbuilder@opam:transition", "@opam/result@opam:1.3",
        "ocaml@4.2.3006"
      ]
    },
    "@esy-ocaml/substs@0.0.1": {
      "record": {
        "name": "@esy-ocaml/substs",
        "version": "0.0.1",
        "source":
          "archive:https://registry.npmjs.org/@esy-ocaml/substs/-/substs-0.0.1.tgz#sha1:59ebdbbaedcda123fc7ed8fb2b302b7d819e9a46",
        "files": [],
        "opam": null
      },
      "dependencies": []
    }
  }
}